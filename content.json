{"pages":[],"posts":[{"title":"Build a Simple SpringBoot Demo","text":"Integrate SpringBoot with MyBatis. 1 Build a SpringBoot Project1.1 Spring Initializer 1.2 Select what you need 2 Integrate MyBatis123456789101112131415161718server: port: 8081spring: devtools: restart: enabled: true datasource: url: jdbc:mysql://localhost:3306/boot_test?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=true driver-class-name: com.mysql.cj.jdbc.Driver username: root password: 123456mybatis: type-aliases-package: my.space.demo.pojo mapper-locations: classpath:mapper/*Mapper.xml 分别配置了数据源，和mybatis的类型aliases，以及mapper.xml的映射文件地址。 2.1 Scan Mappers1@MapperScan(value = &quot;my.space.demo.dao&quot;) 2.2 Configurate a mapper Bean1234@Repositorypublic interface UserMapper { List&lt;User&gt; queryAll();} 2.3 Mapper.xml123456789&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;&lt;mapper namespace=&quot;my.space.demo.dao.UserMapper&quot;&gt; &lt;select id=&quot;queryAll&quot; resultType=&quot;user&quot;&gt; select * from user &lt;/select&gt;&lt;/mapper&gt; 3 JUnit Test12345678910111213@RunWith(SpringRunner.class)@SpringBootTest(classes = DemoApplication.class)public class UserMapperTest { @Autowired private UserMapper userMapper; @Test public void queryAll() throws Exception { List&lt;User&gt; users = userMapper.queryAll(); users.forEach(System.out::println); }} Spring 将Mapper自动装配，装配后直接使用。 4 Final","link":"/2020/11/07/Build-a-Simple-SpringBoot-Demo/"},{"title":"SpringBoot AutoConfiguration","text":"Sth about SpringBoot AutoConfiguraion. 了解自动配置，就需要了解SpringBoot启动类上的注解。 1 $@SpringBootApplication$1234567891011@Target(ElementType.TYPE)@Retention(RetentionPolicy.RUNTIME)@Documented@Inherited@SpringBootConfiguration@EnableAutoConfiguration@ComponentScan(excludeFilters = { @Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class), @Filter(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) })public @interface SpringBootApplication { ...} $@SpringBootConfiguration$ 标注了被标注类是一个组件($@Configuration$) $@EnableAutoConfiguration$ 标注了被标注类开启自动注解。 2 $@EnableAutoConfiguration$123456789@Target(ElementType.TYPE)@Retention(RetentionPolicy.RUNTIME)@Documented@Inherited@AutoConfigurationPackage@Import(AutoConfigurationImportSelector.class)public @interface EnableAutoConfiguration { ...} 2.1 $@AutoConfigurationPackage$自动配置包，就是将启动类同级包下的所有组件都添加到容器中去。 12345678@Target(ElementType.TYPE)@Retention(RetentionPolicy.RUNTIME)@Documented@Inherited@Import(AutoConfigurationPackages.Registrar.class)public @interface AutoConfigurationPackage { ...} AutoConfigurationPackages.Registrar.class 将自动配置的包，和启动类同级目录下的组件都加入到容器中去。 2.2 $AutoConfigurationImportSelector.class$导入自动配置选择器，将SpringBoot内置的$@Configuration$ 组件加入到容器中，其实就是将配置类应用生效，SpringBoot已经写好了，直接用的默认的配置类。 12345678910111213141516171819public class AutoConfigurationImportSelector implements DeferredImportSelector, BeanClassLoaderAware, ResourceLoaderAware, BeanFactoryAware, EnvironmentAware, Ordered { ... protected AutoConfigurationEntry getAutoConfigurationEntry(AnnotationMetadata annotationMetadata) { if (!isEnabled(annotationMetadata)) { return EMPTY_ENTRY; } AnnotationAttributes attributes = getAttributes(annotationMetadata); List&lt;String&gt; configurations = getCandidateConfigurations(annotationMetadata, attributes); configurations = removeDuplicates(configurations); Set&lt;String&gt; exclusions = getExclusions(annotationMetadata, attributes); checkExcludedClasses(configurations, exclusions); configurations.removeAll(exclusions); configurations = getConfigurationClassFilter().filter(configurations); fireAutoConfigurationImportEvents(configurations, exclusions); return new AutoConfigurationEntry(configurations, exclusions); } ...} getCandidateConfigurations 获取候选的配置类 1234567protected List&lt;String&gt; getCandidateConfigurations(AnnotationMetadata metadata, AnnotationAttributes attributes) { List&lt;String&gt; configurations = SpringFactoriesLoader.loadFactoryNames(getSpringFactoriesLoaderFactoryClass(), getBeanClassLoader()); Assert.notEmpty(configurations, &quot;No auto configuration classes found in META-INF/spring.factories. If you &quot; + &quot;are using a custom packaging, make sure that file is correct.&quot;); return configurations;} loadFactoryNames: 1234public static List&lt;String&gt; loadFactoryNames(Class&lt;?&gt; factoryType, @Nullable ClassLoader classLoader) { String factoryTypeName = factoryType.getName(); return loadSpringFactories(classLoader).getOrDefault(factoryTypeName, Collections.emptyList());} 123456789101112131415161718192021222324252627282930private static Map&lt;String, List&lt;String&gt;&gt; loadSpringFactories(@Nullable ClassLoader classLoader) { MultiValueMap&lt;String, String&gt; result = cache.get(classLoader); if (result != null) { return result; } try { Enumeration&lt;URL&gt; urls = (classLoader != null ? classLoader.getResources(FACTORIES_RESOURCE_LOCATION) : ClassLoader.getSystemResources(FACTORIES_RESOURCE_LOCATION)); result = new LinkedMultiValueMap&lt;&gt;(); while (urls.hasMoreElements()) { URL url = urls.nextElement(); UrlResource resource = new UrlResource(url); Properties properties = PropertiesLoaderUtils.loadProperties(resource); for (Map.Entry&lt;?, ?&gt; entry : properties.entrySet()) { String factoryTypeName = ((String) entry.getKey()).trim(); for (String factoryImplementationName : StringUtils.commaDelimitedListToStringArray((String) entry.getValue())) { result.add(factoryTypeName, factoryImplementationName.trim()); } } } cache.put(classLoader, result); return result; } catch (IOException ex) { throw new IllegalArgumentException(&quot;Unable to load factories from location [&quot; + FACTORIES_RESOURCE_LOCATION + &quot;]&quot;, ex); }} 123Enumeration&lt;URL&gt; urls = (classLoader != null ? classLoader.getResources(FACTORIES_RESOURCE_LOCATION) : ClassLoader.getSystemResources(FACTORIES_RESOURCE_LOCATION)); FACTORIES_RESOURCE_LOCATION 获取默认配置类的位置，使用类加载器加载，映射到Properties返回，loadSpringFactories(classLoader).getOrDefault(factoryTypeName, Collections.emptyList())，再取出想要的factoryTypeName。 1FACTORIES_RESOURCE_LOCATION =&gt; META-INF/spring.factories 123456789101112131415loadSpringFactories(classLoader) 返回的 便是SpringBoot默认的配置类包的全限定名&quot;org.springframework.beans.BeanInfoFactory&quot; -&gt; {LinkedList@2090} size = 1&quot;org.springframework.boot.autoconfigure.EnableAutoConfiguration&quot; -&gt; {LinkedList@2092} size = 132&quot;org.springframework.context.ApplicationListener&quot; -&gt; {LinkedList@2094} size = 13&quot;org.springframework.context.ApplicationContextInitializer&quot; -&gt; {LinkedList@2096} size = 8&quot;org.springframework.boot.env.EnvironmentPostProcessor&quot; -&gt; {LinkedList@2098} size = 6&quot;org.springframework.boot.diagnostics.FailureAnalysisReporter&quot; -&gt; {LinkedList@2100} size = 1&quot;org.springframework.boot.diagnostics.FailureAnalyzer&quot; -&gt; {LinkedList@2102} size = 21&quot;org.springframework.boot.SpringBootExceptionReporter&quot; -&gt; {LinkedList@2104} size = 1&quot;org.springframework.boot.SpringApplicationRunListener&quot; -&gt; {LinkedList@2106} size = 1&quot;org.springframework.boot.env.PropertySourceLoader&quot; -&gt; {LinkedList@2108} size = 2&quot;org.springframework.boot.autoconfigure.AutoConfigurationImportListener&quot; -&gt; {LinkedList@2110} size = 1&quot;org.springframework.boot.autoconfigure.AutoConfigurationImportFilter&quot; -&gt; {LinkedList@2112} size = 3&quot;org.springframework.boot.autoconfigure.template.TemplateAvailabilityProvider&quot; -&gt; {LinkedList@2114} size = 5 综上，$AutoConfigurationImportSelector.class$ 导入所有SpringBoot默认的配置类","link":"/2020/11/08/SpringBoot%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE/"},{"title":"Usage of yaml in SpringBoot","text":"Use yaml 1 Configurate yaml在$application.yml $中可以配置javabean的属性注入 1234cat: name: abc age: 12 nickName: ccc 2 Java Bean12345678@Component@ConfigurationProperties(prefix = &quot;cat&quot;)public class Cat { private String name; private String nickName; private Integer age; // 注意Bean重要配置GetterAndSetter 否则不能注入} 只有在Spring容器中的Bean才能被注入属性值，所以需要$@Component$ 另外需要$@ConfigurationProperties(prefix = “cat”)$ 声明在yaml文件中的属性前缀。 此时Idea 会提示让你导入一个依赖 12345&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt; &lt;optional&gt;true&lt;/optional&gt;&lt;/dependency&gt; 目的是让application.yml文件中能有提示。 3 @Validated JSR303 校验只有在使用@ConfigurationProperties 注解的时候才能使用使用jsr303校验，即对注入的属性校验格式。 3.1 加入依赖1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-validation&lt;/artifactId&gt;&lt;/dependency&gt; 3.2 Validated在Bean前加入$@Validated$ 注解，就可以在属性上加校验了，比如$@Email$ ,$@NotNull$ 当输入不符合规范的时候 Binding to target org.springframework.boot.context.properties.bind.BindException: Failed to bind properties under ‘cat’ to my.space.demo.pojo.Cat failed: Property: cat.nameValue: lzzOrigin: class path resource [application.yaml]:20:9Reason: 不是一个合法的电子邮件地址 4 @Value 注入使用@Value 和SPEL表达式也可以注入，但是不支持松散绑定，即不能自动转换驼峰命名法。 12345678@Component//@ConfigurationProperties(prefix = &quot;cat&quot;)public class Cat { @Value(value = &quot;${cat.name}&quot;) private String name; private String nickName; private Integer age;} 5 对比 @Value @ConfigurationProperties 单个属性赋值 批量复制 不支持松散绑定 支持松散绑定 不支持JSR303校验 支持校验 支持SpEL 不支持Spring表达式语言 6 占位符可以使用$${}$ 获取配置文件上下文的内容，如果不存在，可以使用冒号指定默认值 12cat: name: ${dog.name:lzz}_01","link":"/2020/11/08/Usage-of-yaml-in-SpringBoot/"},{"title":"PropertiesSource And ImportResource Annotation","text":"@PropertiesSource 被用来导入指定的yaml配置文件，@ImportResource 被用来导入指定的xml的配置文件(比如bean的注入) 1 @PropertiesSource将配置从application.yml中分离出来，然后使用PropertiesSource读取配置，注意要用properties文件 123cat.age=12cat.name=lzzcat.nick-name=lzq 12345678@Component@PropertySource(value = &quot;classpath:application-cat.properties&quot;)@ConfigurationProperties(prefix = &quot;cat&quot;)public class Cat { private String name; private String nickName; private Integer age;} Tips: 建议所有的配置文件都以application开头，这样会被idea识别为SpringBoot的配置文件，会有代码提示 2 @ImportResource之前在Spring中所有的Bean注入都是在xml中完成的，SpringBoot也可以这样做，虽然不推荐。 在启动类中添加这个注解，value值写入类路径下的xml文件即可，不推荐 3 推荐的SpringBoot配置的写法使用配置类，新建包config，在这里面写配置类 1234567@Configurationpublic class MyAppConfiguration { @Bean public Dog tinyDog() { return new Dog(); }} Dog类中没有添加@Component注解，但是仍然注入成功，bean名就是tinyDog。","link":"/2020/11/08/PropertiesSource-And-ImportResource/"},{"title":"SpringBoot AutoConfiguration","text":"Principle of AutoConfiguration. 1 @EnableAutoConfiguraion​ 开启自动配置 2 @Import(AutoConfigurationImportSelector.class)​ 导入自动配置选择器，具体导入了什么，查看$AutoConfigurationImportSelector$ 中的selectImports -&gt; getAutoConfigurationEntry 方法。 3 getAutoConfigurationEntry1234567891011121314protected AutoConfigurationEntry getAutoConfigurationEntry(AnnotationMetadata annotationMetadata) { if (!isEnabled(annotationMetadata)) { return EMPTY_ENTRY; } AnnotationAttributes attributes = getAttributes(annotationMetadata); List&lt;String&gt; configurations = getCandidateConfigurations(annotationMetadata, attributes); configurations = removeDuplicates(configurations); Set&lt;String&gt; exclusions = getExclusions(annotationMetadata, attributes); checkExcludedClasses(configurations, exclusions); configurations.removeAll(exclusions); configurations = getConfigurationClassFilter().filter(configurations); fireAutoConfigurationImportEvents(configurations, exclusions); return new AutoConfigurationEntry(configurations, exclusions);} 1List&lt;String&gt; configurations = getCandidateConfigurations(annotationMetadata, attributes); ​ 获取候选的配置 12345protected List&lt;String&gt; getCandidateConfigurations(AnnotationMetadata metadata, AnnotationAttributes attributes) { List&lt;String&gt; configurations = SpringFactoriesLoader.loadFactoryNames(getSpringFactoriesLoaderFactoryClass(), getBeanClassLoader()); ...} 123protected Class&lt;?&gt; getSpringFactoriesLoaderFactoryClass() { return EnableAutoConfiguration.class;} 123456789101112131415161718private static Map&lt;String, List&lt;String&gt;&gt; loadSpringFactories(@Nullable ClassLoader classLoader) { ... Enumeration&lt;URL&gt; urls = (classLoader != null ? classLoader.getResources(FACTORIES_RESOURCE_LOCATION) : ClassLoader.getSystemResources(FACTORIES_RESOURCE_LOCATION)); result = new LinkedMultiValueMap&lt;&gt;(); while (urls.hasMoreElements()) { URL url = urls.nextElement(); UrlResource resource = new UrlResource(url); Properties properties = PropertiesLoaderUtils.loadProperties(resource); for (Map.Entry&lt;?, ?&gt; entry : properties.entrySet()) { String factoryTypeName = ((String) entry.getKey()).trim(); for (String factoryImplementationName : StringUtils.commaDelimitedListToStringArray((String) entry.getValue())) { result.add(factoryTypeName, factoryImplementationName.trim()); } } ...} 调用 $SpringFactoriesLoader.loadFactoryNames() $ 使用类加载器获取资源$FACTORIES_RESOURCE_LOCATION $ ( “META-INF/spring.factories” ) ，扫描所有jar包下的这个文件里的内容，整理成properties，返回所有的自动配置类，再从这些里面获取 $ EnableAutoConfiguration.class $ 对应的值。 META-INF/spring.factories在包$spring-boot-autoconfigure-2.3.5.RELEASE.jar$ 里面可以找到含有EnableAutoConfiguration属性的properties，对应的值便是候选的自动配置类（getAutoConfigurationEntry ）。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130# Auto Configureorg.springframework.boot.autoconfigure.EnableAutoConfiguration=\\org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\\org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\\org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\\org.springframework.boot.autoconfigure.batch.BatchAutoConfiguration,\\org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration,\\org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration,\\org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration,\\org.springframework.boot.autoconfigure.context.LifecycleAutoConfiguration,\\org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration,\\org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration,\\org.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration,\\org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration,\\org.springframework.boot.autoconfigure.data.cassandra.CassandraDataAutoConfiguration,\\org.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveDataAutoConfiguration,\\org.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveRepositoriesAutoConfiguration,\\org.springframework.boot.autoconfigure.data.cassandra.CassandraRepositoriesAutoConfiguration,\\org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataAutoConfiguration,\\org.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveDataAutoConfiguration,\\org.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveRepositoriesAutoConfiguration,\\org.springframework.boot.autoconfigure.data.couchbase.CouchbaseRepositoriesAutoConfiguration,\\org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchDataAutoConfiguration,\\org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchRepositoriesAutoConfiguration,\\org.springframework.boot.autoconfigure.data.elasticsearch.ReactiveElasticsearchRepositoriesAutoConfiguration,\\org.springframework.boot.autoconfigure.data.elasticsearch.ReactiveElasticsearchRestClientAutoConfiguration,\\org.springframework.boot.autoconfigure.data.jdbc.JdbcRepositoriesAutoConfiguration,\\org.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration,\\org.springframework.boot.autoconfigure.data.ldap.LdapRepositoriesAutoConfiguration,\\org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration,\\org.springframework.boot.autoconfigure.data.mongo.MongoReactiveDataAutoConfiguration,\\org.springframework.boot.autoconfigure.data.mongo.MongoReactiveRepositoriesAutoConfiguration,\\org.springframework.boot.autoconfigure.data.mongo.MongoRepositoriesAutoConfiguration,\\org.springframework.boot.autoconfigure.data.neo4j.Neo4jDataAutoConfiguration,\\org.springframework.boot.autoconfigure.data.neo4j.Neo4jRepositoriesAutoConfiguration,\\org.springframework.boot.autoconfigure.data.solr.SolrRepositoriesAutoConfiguration,\\org.springframework.boot.autoconfigure.data.r2dbc.R2dbcDataAutoConfiguration,\\org.springframework.boot.autoconfigure.data.r2dbc.R2dbcRepositoriesAutoConfiguration,\\org.springframework.boot.autoconfigure.data.r2dbc.R2dbcTransactionManagerAutoConfiguration,\\org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration,\\org.springframework.boot.autoconfigure.data.redis.RedisReactiveAutoConfiguration,\\org.springframework.boot.autoconfigure.data.redis.RedisRepositoriesAutoConfiguration,\\org.springframework.boot.autoconfigure.data.rest.RepositoryRestMvcAutoConfiguration,\\org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration,\\org.springframework.boot.autoconfigure.elasticsearch.ElasticsearchRestClientAutoConfiguration,\\org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration,\\org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration,\\org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration,\\org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration,\\org.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration,\\org.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration,\\org.springframework.boot.autoconfigure.hazelcast.HazelcastAutoConfiguration,\\org.springframework.boot.autoconfigure.hazelcast.HazelcastJpaDependencyAutoConfiguration,\\org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration,\\org.springframework.boot.autoconfigure.http.codec.CodecsAutoConfiguration,\\org.springframework.boot.autoconfigure.influx.InfluxDbAutoConfiguration,\\org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration,\\org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration,\\org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration,\\org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,\\org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration,\\org.springframework.boot.autoconfigure.jdbc.JndiDataSourceAutoConfiguration,\\org.springframework.boot.autoconfigure.jdbc.XADataSourceAutoConfiguration,\\org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration,\\org.springframework.boot.autoconfigure.jms.JmsAutoConfiguration,\\org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration,\\org.springframework.boot.autoconfigure.jms.JndiConnectionFactoryAutoConfiguration,\\org.springframework.boot.autoconfigure.jms.activemq.ActiveMQAutoConfiguration,\\org.springframework.boot.autoconfigure.jms.artemis.ArtemisAutoConfiguration,\\org.springframework.boot.autoconfigure.jersey.JerseyAutoConfiguration,\\org.springframework.boot.autoconfigure.jooq.JooqAutoConfiguration,\\org.springframework.boot.autoconfigure.jsonb.JsonbAutoConfiguration,\\org.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration,\\org.springframework.boot.autoconfigure.availability.ApplicationAvailabilityAutoConfiguration,\\org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapAutoConfiguration,\\org.springframework.boot.autoconfigure.ldap.LdapAutoConfiguration,\\org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration,\\org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration,\\org.springframework.boot.autoconfigure.mail.MailSenderValidatorAutoConfiguration,\\org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration,\\org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration,\\org.springframework.boot.autoconfigure.mongo.MongoReactiveAutoConfiguration,\\org.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration,\\org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration,\\org.springframework.boot.autoconfigure.quartz.QuartzAutoConfiguration,\\org.springframework.boot.autoconfigure.r2dbc.R2dbcAutoConfiguration,\\org.springframework.boot.autoconfigure.rsocket.RSocketMessagingAutoConfiguration,\\org.springframework.boot.autoconfigure.rsocket.RSocketRequesterAutoConfiguration,\\org.springframework.boot.autoconfigure.rsocket.RSocketServerAutoConfiguration,\\org.springframework.boot.autoconfigure.rsocket.RSocketStrategiesAutoConfiguration,\\org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration,\\org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration,\\org.springframework.boot.autoconfigure.security.servlet.SecurityFilterAutoConfiguration,\\org.springframework.boot.autoconfigure.security.reactive.ReactiveSecurityAutoConfiguration,\\org.springframework.boot.autoconfigure.security.reactive.ReactiveUserDetailsServiceAutoConfiguration,\\org.springframework.boot.autoconfigure.security.rsocket.RSocketSecurityAutoConfiguration,\\org.springframework.boot.autoconfigure.security.saml2.Saml2RelyingPartyAutoConfiguration,\\org.springframework.boot.autoconfigure.sendgrid.SendGridAutoConfiguration,\\org.springframework.boot.autoconfigure.session.SessionAutoConfiguration,\\org.springframework.boot.autoconfigure.security.oauth2.client.servlet.OAuth2ClientAutoConfiguration,\\org.springframework.boot.autoconfigure.security.oauth2.client.reactive.ReactiveOAuth2ClientAutoConfiguration,\\org.springframework.boot.autoconfigure.security.oauth2.resource.servlet.OAuth2ResourceServerAutoConfiguration,\\org.springframework.boot.autoconfigure.security.oauth2.resource.reactive.ReactiveOAuth2ResourceServerAutoConfiguration,\\org.springframework.boot.autoconfigure.solr.SolrAutoConfiguration,\\org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration,\\org.springframework.boot.autoconfigure.task.TaskSchedulingAutoConfiguration,\\org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration,\\org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration,\\org.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfiguration,\\org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration,\\org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration,\\org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration,\\org.springframework.boot.autoconfigure.web.reactive.HttpHandlerAutoConfiguration,\\org.springframework.boot.autoconfigure.web.reactive.ReactiveWebServerFactoryAutoConfiguration,\\org.springframework.boot.autoconfigure.web.reactive.WebFluxAutoConfiguration,\\org.springframework.boot.autoconfigure.web.reactive.error.ErrorWebFluxAutoConfiguration,\\org.springframework.boot.autoconfigure.web.reactive.function.client.ClientHttpConnectorAutoConfiguration,\\org.springframework.boot.autoconfigure.web.reactive.function.client.WebClientAutoConfiguration,\\org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration,\\org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration,\\org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration,\\org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration,\\org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration,\\org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration,\\org.springframework.boot.autoconfigure.websocket.reactive.WebSocketReactiveAutoConfiguration,\\org.springframework.boot.autoconfigure.websocket.servlet.WebSocketServletAutoConfiguration,\\org.springframework.boot.autoconfigure.websocket.servlet.WebSocketMessagingAutoConfiguration,\\org.springframework.boot.autoconfigure.webservices.WebServicesAutoConfiguration,\\org.springframework.boot.autoconfigure.webservices.client.WebServiceTemplateAutoConfiguration 以 HttpEncodingAutoConfiguration 为例解释自动配置原理12345678@Configuration(proxyBeanMethods = false) // 表示当前类为配置类，可加入到容器中@EnableConfigurationProperties(ServerProperties.class) // 开启ConfigurationProperties@ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.SERVLET)@ConditionalOnClass(CharacterEncodingFilter.class)@ConditionalOnProperty(prefix = &quot;server.servlet.encoding&quot;, value = &quot;enabled&quot;, matchIfMissing = true)public class HttpEncodingAutoConfiguration { ...} ServerProperties.class1234@ConfigurationProperties(prefix = &quot;server&quot;, ignoreUnknownFields = true)public class ServerProperties { ...} 这个类的属性可以从properties文件中注入，书写格式的前缀便是”server” 因此，在application.yml 文件中配置的所有的属性，都可以找到一个xxxxProperties配置类作为依据，类中所有的属性便可以配置的属性。 @EnableConfigurationProperties便将properties文件和配置类绑定 @ConditionalOnXXXX作为一种条件判断的注解。 比如：$@ConditionalOnWebApplication$ 注解便是判断当前是不是一个web应用。 $@ConditionalOnClass$ 判断当前是否已经有过滤器$CharacterEncodingFilter$ $@ConditionalOnProperty$ 判断当前是否有该properties属性，如果没有就设置为 true，然后再判断，其实就是永远为真，无论你写不写这个properties键。 配置类的书写12345678910111213141516171819202122232425@Configuration(proxyBeanMethods = false)@EnableConfigurationProperties(ServerProperties.class)@ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.SERVLET)@ConditionalOnClass(CharacterEncodingFilter.class)@ConditionalOnProperty(prefix = &quot;server.servlet.encoding&quot;, value = &quot;enabled&quot;, matchIfMissing = true)public class HttpEncodingAutoConfiguration { private final Encoding properties; // 将配置的properties属性注入到该配置类中 public HttpEncodingAutoConfiguration(ServerProperties properties) { this.properties = properties.getServlet().getEncoding(); } @Bean @ConditionalOnMissingBean // 在容器中缺失该bean的时候注入到容器中。注入组件的依赖，属性值则从properties文件中获取 public CharacterEncodingFilter characterEncodingFilter() { CharacterEncodingFilter filter = new OrderedCharacterEncodingFilter(); filter.setEncoding(this.properties.getCharset().name()); filter.setForceRequestEncoding(this.properties.shouldForce(Encoding.Type.REQUEST)); filter.setForceResponseEncoding(this.properties.shouldForce(Encoding.Type.RESPONSE)); return filter; } ...} 原理SpringBoot 自动配置的基本原理，就是SpringBoot已经提前写好了很多配置类，在工程启动的时候会根据情况将需要的自动配置类加入到容器中，这些配置类又和properties 文件绑定，从properties文件中配置便可以注入到自动配置类中，自动配置类又根据配置new出依赖加入到容器中。","link":"/2020/11/08/SpringBoot-AutoConfiguration/"},{"title":"SpringBoot Logging Framework","text":"Logging Logging Logging… 1.1 SpringBoot Logging FrameworkSpringBoot推荐日志框架抽象层使用slf4j，实现层使用Logback，但是也可以使用其他的日志框架，比如JUL，可以在中间添加适配层（slf4j开头的jar包），实现slf4j接口，调用JUL的方法。 1.2 遗留问题在将各种框架整合在一起的时候，不同的框架使用不同的日志实现，如何统一？ SLF4J 官方让使用xxx-over-slf4j.jar提换掉原来的实现jar，从而实现使用原来的接口（比如log4j，以保证其他框架正常使用）但是事实上调用logback的实现类。 根据maven依赖可知，logback直接依赖于slf4j-api，而其他框架依赖于xxx-to-slf4j，然后再简介依赖slf4j 2.1 SpringBoot 使用日志123456789@RunWith(SpringRunner.class)@SpringBootTestpublic class LoggingTest { @Test public void logTest() { Logger logger = LoggerFactory.getLogger(LoggingTest.class); logger.warn(&quot;wuhu qifei~&quot;); }} 2.2 SpringBoot日志配置1234logging: level: trace path: 输出日志文件路径 file: 输出日志文件名字 3.1 日志框架替换假设现在想使用log4j，那么就需要先将log4j-to-slf4j替换掉，因为本身就是用log4j嘛 12345678910111213141516171819202122 &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt; &lt;exclusions&gt; &lt;exclusion&gt; &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt; &lt;artifactId&gt;logback-classic&lt;/artifactId&gt; &lt;/exclusion&gt; &lt;exclusion&gt; &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt; &lt;artifactId&gt;logback-core&lt;/artifactId&gt; &lt;/exclusion&gt; &lt;/exclusions&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.slf4j&lt;/groupId&gt; &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt; &lt;version&gt;1.7.30&lt;/version&gt;&lt;/dependency&gt;","link":"/2020/11/11/SpringBoot-Logging-Framework/"},{"title":"SpringBoot WebAutoConfiguration","text":"WebAutoConfiguration SpringBoot 对SpringMVC的自动配置均在WebAutoConfiguration中。 1 Static Resource12345678910111213141516171819202122232425262728@Configuration(proxyBeanMethods = false)@Import(EnableWebMvcConfiguration.class)@EnableConfigurationProperties({ WebMvcProperties.class, ResourceProperties.class })@Order(0)public static class WebMvcAutoConfigurationAdapter implements WebMvcConfigurer { ... @Override public void addResourceHandlers(ResourceHandlerRegistry registry) { if (!this.resourceProperties.isAddMappings()) { logger.debug(&quot;Default resource handling disabled&quot;); return; } Duration cachePeriod = this.resourceProperties.getCache().getPeriod(); CacheControl cacheControl = this.resourceProperties.getCache().getCachecontrol().toHttpCacheControl(); if (!registry.hasMappingForPattern(&quot;/webjars/**&quot;)) { customizeResourceHandlerRegistration(registry.addResourceHandler(&quot;/webjars/**&quot;) .addResourceLocations(&quot;classpath:/META-INF/resources/webjars/&quot;) .setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl)); } String staticPathPattern = this.mvcProperties.getStaticPathPattern(); if (!registry.hasMappingForPattern(staticPathPattern)) { customizeResourceHandlerRegistration(registry.addResourceHandler(staticPathPattern) .addResourceLocations(getResourceLocations(this.resourceProperties.getStaticLocations())) .setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl)); } } ...} 在WebAutoConfiguration中可以找到静态内部类WebMvcAutoConfigurationAdapter，在方法addResourceHandlers中可以看到SpringBoot对静态资源的配置分为两种，一种是webjars的配置，一种是对静态资源目录下的配置。 1.1 webjars使用maven也可以配置常见的web静态资源，如js，css等 在https://www.webjars.org/可以找到相应的maven依赖 将包导入后，SpringBoot会在类路径下找到webjars文件夹，将webjars连同里面的资源一起导入到类路径下，从而方便获取。 1&lt;script src=&quot;../static/js/static_src.js&quot; th:src=&quot;@{/webjars/jquery/3.5.1/jquery.js}&quot;&gt;&lt;/script&gt; 注意：在Thymeleaf中，在前面加/ 表示从网站根目录下开始请求，不加表示在当前访问路径下请求 1.2 static resource path1this.resourceProperties.getStaticLocations() 1234567891011public class ResourceProperties { private static final String[] CLASSPATH_RESOURCE_LOCATIONS = { &quot;classpath:/META-INF/resources/&quot;, &quot;classpath:/resources/&quot;, &quot;classpath:/static/&quot;, &quot;classpath:/public/&quot; }; /** * Locations of static resources. Defaults to classpath:[/META-INF/resources/, * /resources/, /static/, /public/]. */ private String[] staticLocations = CLASSPATH_RESOURCE_LOCATIONS;} 可以看出默认配置的资源路径为这些 Unfinished","link":"/2020/11/11/SpringBoot-WebAutoConfiguration/"},{"title":"Linear Algebra Review 1","text":"Linear Algebra and Its Applications Chapter 1. 1.1 线性方程组1.1.1 等价如果两个线性方程组有相同的解集，那么就称两个线性方程组等价。 1.1.2 解的情况 线性方程组解集的三种情况： 无解 有唯一解 有无穷多解 特殊的，称线性方程组有唯一或者无穷多个解为线性方程组相容。，若无解，则称为不相容。 1.1.3 增广矩阵$$[\\alpha_1, \\alpha_2, \\alpha_3…\\alpha_n]x=\\beta$$ $$[\\alpha_1, \\alpha_2, \\alpha_3…\\alpha_n, \\beta]$$ 1.1.4 方程组的解法1.1.4.1 初等行变换 倍加变换 对换变换 倍乘变换 若一个矩阵通过初等行变换变为另一个矩阵，则称这两个矩阵行等价。 1.1.5 解的存在性和唯一性 初步可以使用初等行变换，变为阶梯矩阵，如果在增广矩阵中某一行$A$某一行变为0，$\\beta$不为零，则不满足。$$ \\left[ \\begin{matrix} \\alpha_{11} &amp; \\alpha_{11} &amp; \\alpha_{11} &amp; \\beta_1\\ 0 &amp; \\alpha_{11} &amp; \\alpha_{11} &amp; \\beta_2\\ 0 &amp; 0 &amp; 0 &amp; \\beta_3 \\end{matrix} \\right]$$ 1.2 行化简与阶梯形矩阵1.2.1 先导元素 非零行的先导元素是指该行中最左边的非零元素。 1.2.2 简化阶梯形矩阵 每一个矩阵行等价与唯一的一个简化行阶梯矩阵 简化阶梯形矩阵的先导元素必为1 1.2.3 主元位置 / 主元列 定义 矩阵中的主元位置是A中对应于它的阶梯形中先导元素的位置，主元列是A的含有主元位置的列。 Unfinished","link":"/2020/11/15/Linear-Algebra-Review-1/"},{"title":"Linear Regression","text":"The implement of Linear Regression with Pytorch. 1 公式线性预测函数：$${\\hat y} = wx+b$$损失函数：$$loss = {1 \\over 2} \\sum_i {(y_i-{\\hat y}_i)^2}$$梯度下降就好了 2 Pytorch实现2.1 真实预测函数12def real_function(x): return 10 * x + 5 2.2 生成随机数据1234def gen_data(count, batch_size): x = torch.randn(batch_size, count, 1) y = real_function(x) + torch.randn(count, 1) return x, y 2.3 模型定义12345678class LinearRegression(nn.Module): def __init__(self): super(LinearRegression, self).__init__() self.fc = nn.Linear(1, 1, bias=True) self.activation = nn.Sigmoid() def forward(self, x): return self.fc(x) 2.4 训练12345678910111213141516171819def train(train_x, train_y, test_x, test_y, model: nn.Module, epochs: int): optimizer = torch.optim.SGD(model.parameters(), lr=0.005) loss_function = torch.nn.MSELoss() for epoch in range(epochs): for i, x in enumerate(train_x): y_pred = model(x) loss = loss_function(y_pred, train_y[i]) optimizer.zero_grad() loss.backward() optimizer.step() if i % 20 == 0: print(loss.item()) model.eval() y_pred = model(x_test) save_processing(test_x, test_y, y_pred.detach().numpy(), str(epoch) + '.jpg') model.train() 2.5 完整代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101import torchimport torch.nn as nnimport torchvisionimport torchvision.transforms as transformsimport numpy as npimport matplotlib.pyplot as pltfrom PIL import Imageimport imageioimport osdef real_function(x): return 10 * x + 5def show_grid(x, y): plt.scatter(x.squeeze(), y.squeeze()) plt.show()def show_test_pred_grid(x, y, pred_y): plt.scatter(x.squeeze(), y.squeeze()) plt.scatter(x.squeeze(), pred_y.squeeze()) plt.show()def save_processing(x, y, pred_y, filename): plt.clf() plt.scatter(x.squeeze(), y.squeeze(), s=12, c='red') plt.scatter(x.squeeze(), pred_y.squeeze(), s=12, c='blue') plt.savefig(filename)def create_gif(): def inner_cmp(elem: str): return int(elem[:elem.find('.')]) imgs_names = [file for file in os.listdir() if file.endswith('jpg')] imgs_names = sorted(imgs_names, key=lambda elem: inner_cmp(elem)) print(imgs_names) frame = [] for filename in imgs_names: frame.append(imageio.imread(filename)) imageio.mimsave('processing.gif', frame, 'GIF', duration=0.35)def gen_data(count, batch_size): x = torch.randn(batch_size, count, 1) y = real_function(x) + torch.randn(count, 1) return x, yclass LinearRegression(nn.Module): def __init__(self): super(LinearRegression, self).__init__() self.fc = nn.Linear(1, 1, bias=True) self.activation = nn.Sigmoid() def forward(self, x): return self.fc(x)def train(train_x, train_y, test_x, test_y, model: nn.Module, epochs: int): optimizer = torch.optim.SGD(model.parameters(), lr=0.005) loss_function = torch.nn.MSELoss() for epoch in range(epochs): for i, x in enumerate(train_x): y_pred = model(x) loss = loss_function(y_pred, train_y[i]) optimizer.zero_grad() loss.backward() optimizer.step() if i % 20 == 0: print(loss.item()) model.eval() y_pred = model(x_test) save_processing(test_x, test_y, y_pred.detach().numpy(), str(epoch) + '.jpg') model.train() create_gif()if __name__ == '__main__': x_train, y_train = gen_data(50, 10) x_test, y_test = gen_data(50, 1) # show_grid(x_train, y_train) model = LinearRegression() for param in model.parameters(): torch.nn.init.normal(param) train(x_train, y_train, x_test, y_test, model, 20) # show_test_pred_grid(x_test, y_test, y_pred.detach().numpy()) 3 数据可视化3.1 绘制预测值和真实值12345678910def show_test_pred_grid(x, y, pred_y): plt.scatter(x.squeeze(), y.squeeze()) plt.scatter(x.squeeze(), pred_y.squeeze()) plt.show()def save_processing(x, y, pred_y, filename): plt.clf() plt.scatter(x.squeeze(), y.squeeze(), s=12, c='red') plt.scatter(x.squeeze(), pred_y.squeeze(), s=12, c='blue') plt.savefig(filename) 3.2 创建GIF1234567891011def create_gif(): def inner_cmp(elem: str): return int(elem[:elem.find('.')]) imgs_names = [file for file in os.listdir() if file.endswith('jpg')] imgs_names = sorted(imgs_names, key=lambda elem: inner_cmp(elem)) print(imgs_names) frame = [] for filename in imgs_names: frame.append(imageio.imread(filename)) imageio.mimsave('processing.gif', frame, 'GIF', duration=0.35) 将每一帧的图片放入列表中，传入$mimsave$ 中。","link":"/2020/11/27/Linear-Regression/"},{"title":"Something about Entropy","text":"KL Divergence, Cross Entropy, CELoss, BELoss 信息量$$I(x)=-log(p(x)) \\quad x \\in X$$ 某事件发生的概率越大，那么信息量越小 熵$$H(X)=-\\sum_{x \\in X}p(x)log(p(x))$$ $X$ 表示某一事件的随机变量，$x$表示随机变量$X$所有可能的取值情况。比如，事件$X$表示骰子的显示点数，那么$x\\in{1,2,3,4,5,6}$。 熵就是对随机变量X不确定性的度量，即对$X$所有取值的信息量的期望。 相对熵 / KL 散度$$D_{KL}(p||q)=\\sum_{x\\in X}p(x)log{p(x) \\over q(x)}= \\sum_{x\\in X}p(x)log(p(x)) -\\sum_{x\\in X}p(x)log(q(x))$$ 表示两个随机变量分布的距离（但是KL散度不具有对称性，$D_{KL}(p||q)\\neq D_{KL}(q||p)$） 如果$D_{KL}(p||q)=0$表示分布完全相同 这里的$p, q$表示对于统一随机事件的不同概率分布，就好比都是掷骰子，但是$p$分布下每个点数出现的概率和$q$分布不同。 交叉熵$$H(p,q)=\\sum_{x\\in X}p(x)log{1 \\over q(x)}= -\\sum_{x\\in X}p(x)log(q(x))$$ 发现交叉熵和$D_{KL}(p||q)$相差一个$H(p)$$$\\begin{aligned}H(p) &amp;=-\\sum_{x\\in X} p\\left(x\\right) \\log p\\left(x\\right) \\\\D_{K L}(p | q) &amp;=\\sum_{x \\in X} p\\left(x\\right) \\log \\frac{p\\left(x\\right)}{q\\left(x\\right)}=\\sum_{x\\in X}\\left(p\\left(x\\right) \\log p\\left(x\\right)-p\\left(x\\right) \\log q\\left(x\\right)\\right.\\\\H(p, q) &amp;=-\\sum_{x\\in X} p\\left(x\\right) \\log q\\left(x\\right)\\\\\\end{aligned}$$对于给定$N$个样本，其$H(p) \\quad p\\sim real$ 是一个常数。 交叉熵损失函数如何计算的损失函数$$H(p, q) =-\\sum_{x\\in X} p\\left(x\\right) \\log q\\left(x\\right)=-\\mathbb {E}(\\log q(x))$$ 注意，此处$\\Sigma$ 的对象是随机变量$X$的取值，所以上是可以写为：$$H(p, q)=-\\left[ p(x_1)\\log q\\left(x_1\\right) +p(x_2)\\log p(x_2) + p(x_3)\\log q(x_3)+ \\dots+p(x_n)\\log q(x_n) \\right] \\\\x_1,x_2,x_3,\\dots, x_n \\in X$$因为给定$M$个样本，所以我们可以用频率代替概率：$$\\begin{equation}H(p, q)=-\\left[ {count(x_1) \\over M} \\log q\\left(x_1\\right) +{count(x_2) \\over M}\\log p(x_2) + {count(x_3) \\over M}\\log q(x_3)+ \\dots+{count(x_n) \\over M}\\log q(x_n) \\right] \\\\x_1,x_2,x_3,\\dots, x_n \\in X \\\\\\sum_{i}^{N}count(x_i)=M \\\\\\end{equation}$$注意，$N$表示随机变量$X$有N种取值，$M$表示一共有M个样本，$count(x_i)$表示随机变量$x_i$在这M个样本中出现的次数。（注意区分$\\Sigma$ 求和的对象）因此，上式可以写作：$$H(p, q)=-{1\\over M}\\sum_{i}^{N}\\left[ count(x_i) \\log q(x_i) \\right]$$上式可以解释为，给定$M$个样本，我可以算出这些样本中不同“类别”各有多少个样本，分别和我的模型预测的该类别的概率相乘即为交叉熵。但是，事实上，我们不会先算样本里不同类别有多少，而是按照一个样本一个样本的算。 因此：$$H(p, q)=-{1 \\over M}\\sum_i^N\\sum_j^M[\\mathbb I(x^{(j)}=i)\\log q(x_i^j)]$$此式表示对于给定的某一类别$x_i$，我将模型对$M$个样本的预测中，预测为类别$i$的，就将$\\log q(x_i^j)$加到$H(p, q)$中去。 此处的$\\mathbb I(x^{(j)}=i)$表示，如果第$j$个样本的真实类别是$i$那么返回值就是$1$，否则为$0$。 也可以看作是，对于样本$x$ ，他的真实类别是 更加形象一点：$$\\begin{aligned}H(p, q)&amp;=-{1 \\over M}\\sum_{i}^{N}\\left[ count(x_i) \\log q(x_i) \\right] \\\\H(p, q)&amp;=-{1 \\over M}\\sum_i^N\\sum_j^M[\\mathbb I(x^{(j)}=i)\\log q(x_i^j)] \\\\H(p, q)&amp;=-{1 \\over M}\\sum_j^{M}\\left[ \\mathbb I(x^{(j)}= k)(0_{i=0} * \\log q(x^{(j)}) +0_{i=1} * \\log q(x^{(j)})+\\dots+1_{i=k} * \\log q(x^{(j)})) + \\dots +0_{i=n}*\\log q(x^{(j)})\\right] \\\\\\end{aligned}$$综上，可以阐述交叉熵函数的计算原理，即对于$M$个样本，将模型预测出的总共$N$个类别的概率中，将第$k$个类别的概率加入损失函数中，其中$k$的取值即为真实label的值。 二分类的交叉熵损失函数 BCELoss如果写作概率的表达形式$$H(p, q)=-\\left[ p(x=1)\\log q(x=1) + p(x=0)\\log q(x=0) \\right]$$写作对样本求和的形式：$$H(p, q) = -\\sum_i^M\\left[ y^{i} \\log q(x^{(i)}) + (1-y^{i})\\log (1-q(x^{(i)})) \\right]$$ Pytorch 中的CrossEntropyLossShape: Input: (N, C)(N,C) where C = number of classes, or (N, C, d_1, d_2, …, d_K)(N,C,d1,d2,…,dK) with K \\geq 1K≥1 in the case of K-dimensional loss. Target: (N)(N) where each value is$ 0 \\leq \\text{targets}[i] \\leq C-10≤targets[i]≤C−1 , or (N, d_1, d_2, …, d_K)(N,d1,d2,…,dK)$ with$ K \\geq 1K≥1 $in the case of K-dimensional loss. Output: scalar. If reduction is 'none', then the same size as the target: $(N) , or (N, d_1, d_2, …, d_K)(N,d1,d2,…,dK)$ with$ K \\geq 1K≥1 $in the case of K-dimensional loss. Pytroch target就是一个整数，如果有$K$类，那么每一类编号$[0, K-1]$","link":"/2020/11/27/Something-about-Entropy/"},{"title":"Logistic Regression","text":"The implement of Logistic Regression Logistic Regression简单理解使用一超平面划分$A, B$两类，分为正类和负类，将某一坐标值带入后可以根据结果的正负判断分类。 使$Sigmoid$ 函数表示概率，得出最大似然估计$$loss = -{1 \\over m}\\sum_i{[y^{(i)}log(h(x^{(i)})) + (1-y^{(i)})log(1-h(x^{(i)}))]}$$优化即可，最终的决策边界为一条直线，分开正类和负类，如果对于线性不可分，将$h(x)$替换为非线性函数即可（即多层感知机）。 代码1234567891011class LogisticRegression(nn.Module): def __init__(self): super(LogisticRegression, self).__init__() self.fc = nn.Linear(2, 1, bias=True) self.activation = torch.nn.Sigmoid() def forward(self, x): # print('in forward:', x.size(), self.fc.weight.size()) return self.activation(self.fc(x)) 如果使用多层感知机，参数初始换使用标准正态分布比较好，对于均匀分布学的的决策边界很容易成为线性的。 完整代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136import torchimport torch.nn as nnimport torchvisionimport torchvision.transforms as transformsimport numpy as npimport matplotlib.pyplot as pltdef real_function(x): return torch.sqrt(0.25 - (x - 0.5) ** 2)def gen_data(count, batch_size): x = torch.rand(count, batch_size, 1, 2) y = torch.zeros(count, batch_size, 1, 1, requires_grad=False) for c in range(count): for batch in range(batch_size): x1 = x[c][batch][0][0] x2 = x[c][batch][0][1] if x2 &gt; real_function(x1): y[c][batch][0][0] = 1 return x, yclass LogisticRegression(nn.Module): def __init__(self): super(LogisticRegression, self).__init__() self.fc1 = nn.Linear(2, 8, bias=True) self.fc2 = nn.Linear(8, 4, bias=True) self.fc3 = nn.Linear(4, 1, bias=True) self.tanh = nn.Tanh() self.sigmoid = nn.Sigmoid() def forward(self, x): # print('in forward:', x.size(), self.fc.weight.size()) x = self.fc1(x) x = self.sigmoid(x) x = self.fc2(x) x = self.sigmoid(x) x = self.fc3(x) return self.sigmoid(x)def train(x_train, y_train, x_test, y_test, model: nn.Module, epochs): optimizer = torch.optim.Adam(model.parameters(), lr=0.002, weight_decay=1e-5) loss_function = nn.BCELoss() for epoch in range(epochs): for i, x in enumerate(x_train): y_pred = model(x) # 前者是input，后者是target # 前者需要梯度，后者不需要梯度 loss = loss_function(input=y_pred, target=y_train[i]) optimizer.zero_grad() loss.backward() optimizer.step() if i % 100 == 0: print(loss.item())def test(x_test, y_test, model: nn.Module): model.eval() cnt = 0 for i, x in enumerate(x_test): y_pred = model(x) # print(x.size(), y_pred.size()) y_pred.detach()[y_pred &gt;= 0.5] = 1 y_pred.detach()[y_pred &lt; 0.5] = 0 result = (y_pred == y_test[i]) cnt += result.sum().item() print('accuracy = ' + str(100.0 * cnt / (x_test.size()[0] * x_test.size()[1])) + '%')def show_grid(model: nn.Module): batch_size = 10 x_data, _ = gen_data(500, batch_size) model.eval() plt.xlim((0, 1)) plt.ylim((0, 1)) for i, x in enumerate(x_data): y_pred = model(x) for c in range(batch_size): if np.abs(y_pred[c][0][0].item() - 0.5) &lt; 0.1: # print(y_pred[c][0][0].item() - 0.5) plt.scatter(x[c][0][0], x[c][0][1], c='blue')def show_origin(x_data, y_data, batch_size): plt.xlim((0, 1)) plt.ylim((0, 1)) for i, x in enumerate(x_data): for c in range(batch_size): if y_data[i][c][0][0].item() == 1: plt.scatter(x[c][0][0], x[c][0][1], c='red') else: plt.scatter(x[c][0][0], x[c][0][1], c='black')if __name__ == '__main__': x_train, y_train = gen_data(100, 10) x_test, y_test = gen_data(100, 10) model = LogisticRegression() # 使用正态分布初始化参数，对使用sigmoid激活函数的多层神经网络做二分类有帮助 # 使用均匀分布最终的判别边界会变成一条直线? # for param in model.parameters(): # torch.nn.init.uniform(param) for param in model.parameters(): torch.nn.init.normal(param) train(x_train, y_train, x_test, y_test, model, 150) # model.load_state_dict(torch.load('./params.pkl')) test(x_test, y_test, model) show_origin(x_train, y_train, 10) show_grid(model) plt.savefig('result.jpg') plt.show() torch.save(model.state_dict(), 'params.pkl') # for param in model.parameters(): # print(param)","link":"/2020/11/27/Logistic-Regression/"},{"title":"Conv And ConvTranspose Pooling And Unpooling","text":"To be honest, I don’t really the meaning behind these formulas. Conv2d$$H_{out} = \\left \\lfloor {\\\\{H_{in} + 2 * padding - kernel\\_size} \\over stride } + 1 \\right \\rfloor$$ ConvTranspose2d$$H_{out} = (H_{in} - 1) * stride - 2 * padding + dilation * (kernel_size - 1) + output_padding + 1$$ $dalition$ 默认为1，$output_padding$默认为0 或者：$$H_{out} = (H_{in} - 1) * stride - 2 * padding + kernel\\_size$$ MaxPool2d$$H_{out} = H_{Conv_out}$$ MaxUnpool2d如果需要反池化，需要在层加参数$return_indices=True$，将返回的$indices$传入到$MaxUnpool2d$中$$H_{out} = (H_{in} - 1) * stride - 2 * padding + kernel\\_size$$有点麻烦，不好编程 AutoEncoder123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263class Encoder(nn.Module): def __init__(self): super(Encoder, self).__init__() self.conv2d_1 = nn.Conv2d(1, 8, kernel_size=5, stride=2, padding=1) self.conv2d_2 = nn.Conv2d(8, 16, kernel_size=3, stride=2, padding=1) self.batch_1 = nn.BatchNorm2d(8) self.batch_2 = nn.BatchNorm2d(16) self.max_pool2d = nn.MaxPool2d(kernel_size=2, stride=2, padding=0, return_indices=True) self.relu = nn.ReLU() def forward(self, x): x = self.conv2d_1(x) x = self.batch_1(x) x = self.relu(x) x, indices_1 = self.max_pool2d(x) x = self.conv2d_2(x) x = self.batch_2(x) x = self.relu(x) x, indices_2 = self.max_pool2d(x) return x, indices_1, indices_2class Decoder(nn.Module): def __init__(self): super(Decoder, self).__init__() self.de_conv_2 = nn.ConvTranspose2d(in_channels=16, out_channels=8, kernel_size=4, stride=2, padding=1) self.de_conv_1 = nn.ConvTranspose2d(in_channels=8, out_channels=1, kernel_size=6, stride=2, padding=1) self.un_pool_2 = nn.MaxUnpool2d(kernel_size=3, stride=1, padding=0) self.un_pool_1 = nn.MaxUnpool2d(kernel_size=3, stride=2, padding=0) self.batch_2 = nn.BatchNorm2d(8) self.batch_1 = nn.BatchNorm2d(1) self.relu = nn.ReLU() self.tanh = nn.Tanh() def forward(self, x, indices_1, indices_2): x = self.un_pool_2(x, indices_2) x = self.de_conv_2(x) x = self.batch_2(x) x = self.relu(x) x = self.un_pool_1(x, indices_1) x = self.de_conv_1(x) x = self.batch_1(x) x = self.tanh(x) return xclass AutoEncoder(nn.Module): def __init__(self): super(AutoEncoder, self).__init__() self.encoder = Encoder() self.decoder = Decoder() def forward(self, x): code, indices_1, indices_2 = self.encoder(x) result = self.decoder(code, indices_1, indices_2) return result","link":"/2020/11/28/Conv-And-ConvTranspose-Pooling-And-UnPooling/"},{"title":"Diary 12-01-2020","text":"6d0d0c4675815d45a6112a049763c40890b55ed6a4c244b5699991b53b08d7e7f0a131e2a015ac1a7e8b25bd84f38840412f3fe8932dd61f3ff5318ccd4759cb492a33eb5362554bcc4c9b20bd005f9e117bdaf383abae2bd6d14b190db2223a7b1592c8f24d691bfb5b330eae047052f64dcecf607bec470eff7edb9c2679a7ad9276a797537b91d382d345e93a84a31c7bd1f6b5994da162151cec03ed4bb241d11af75616d472733eb07c37fb6684a62a7d301bb2a90c115d50aaad2df2f24f4b2838075a6b0f17bcb728d16ab518f0f04375fe7c4ab9058c2e4a5ea0e62bec6e229c35aad2399e75d93a4429c3bd85829be747d0fec3fd932b9007646063b5ad4937938528fece0d7ad0bf2764196fb881091c113b9e92d037f48f2671845bb59d950b61db869cf44aa12293277ab5ed48fb08b6ad5f699a03cb2f0a6e4cffc2374841e6f1c5277d49ca3f836d4ca35dbc90746153dcb19a85bf268abee6db7b1d49a13707325c3a5bdb804169ef7b028c6df86178b2250bde1329482057f3bf438a54237b33e254c179efeabed203f2e4783eaab8e5fb95eaf6bbc27ed4ca87979ca7107f7bb17394c83e854b5d30c8c37622710c4c76a0e051baa48e05 I am lost in your heart.","link":"/2020/12/01/Diary-12-01-2020/"},{"title":"Happy Birthday~","text":"Happy birthday to me ~","link":"/2020/12/05/Happy-Birthday/"},{"title":"Diary-12-14-2020","text":"6d0d0c4675815d45a6112a049763c4080079ae8fe732c13ca785d67a465283aed858313589619dd01b8df2abe1d080c06578ccc49e7f8f5352e93d212be50d87108f640e53f3263481721247c31305b7198af6676f3f467938ed03d6f797ad4b362772f1dc9561f4d36637b29f6ce15a486a5b708cf086b0983450c18f906c00faf6f5ab2c1073741d9c8902629ba4c370fab73698019de195d01c6385c26a13c6593a614b692e2e0123bddf8a5264f6308f9418f1e2e744f2c7d23f333f33a4805e1808efe0ae51c564c650e4e74d0331b7b2785cc59efbe6bf95f61ae390804e2317195e3f0e04bf421573bfb38bf7bf3bde20481b432866fb87abbcef5b9458ff0759bd058d7b1060f08d1863fd25d911431acf8960cf2e889f396ba3f10e6c44a05500b84fddef2b90536c451d5d4cd98d47f052e534914ef73985b8b5a1ad97918b5c839b9e322aa8488a7acbda I am lost in your heart.","link":"/2020/12/14/Diary-12-14-2020/"},{"title":"Diary-12-25-2020","text":"6d0d0c4675815d45a6112a049763c408977d75f161ab207ab3a26bbd083aabc0988f75a1fbab1dff2aba18cec4090cbd04a88205a9bac72a398725ace28dfae32591b76ed08efad5ed3a5c8679946ad8c629eac31bc8d6b500859e01bae225c509d86de38f80864d694ec83709fc1ecd999bc8df368dbfe347d62228e73be4c271147503572e3d9a8518267a69357d07a8c2dd9e282d7ae5f7f98f6607d1276eb904479d8c3d6ad58e3e14ef69755c95957e5394eb770c213482c7cfc6950db4bd951a037f653fa589826b639f3c43e6 I am lost in your heart.","link":"/2020/12/25/Diary-12-25-2020/"},{"title":"Something about Pointers","text":"指针啊指针啊 1 指针数组与数组指针1.1 指针数组就是一个数组，只不过存储的数据都是指针。 1.2 数组指针指向数组的指针，又被称之为行指针，指向一个而数组的一行，如果是一维数组，指向该数组的一整行元素，通过解引用后可以直接当作原数组使用。 123int (*p)[30];int a[30];p = a; 1234int a[3][4];int (*p)[4];p = a;p = a + 1; 行指针也可以取二维数组的某一行。 2 动态分配一维数组123int *a;// malloc 分配地址，内部数据随机a = (int*)malloc(n, sizeof(int)); 二维数组123456int** a;// calloc 分配地址，内部数据清零// 分配a[n][m]a = (int**)calloc(n, sizeof(int*));for (int i = 0; i &lt; n; i++) a[i] = (int*) calloc(m, sizeof(int)); 会发现一个现象，如果给二维数组分配内存，会多占用n个地址。 因为第一次分配指针的指针的地址，会占用一个长度为n的空间，内部存放指针，每个指针指向另外m个区域。 因此一共其实占用了n * m + n 个地址。 3 函数指针函数指针应用，回调函数，将函数指针作为参数传入函数中。 1234567int F(int a, int b) { return a + b;}void solve(int (*p)(int, int)) { //bababbab....} 4 内存分配一个程序占用的内存被划分为Stack, Heap, Code(Text), Static/Global, 在函数中的局部变量会存储在栈中，如果是动态内存分配的空间，会在Heap中开辟，通过一个局部变量指针指向，如果指针被销毁，那么这一片内存没有被释放，就会产生内存泄露。","link":"/2021/01/10/Something-about-Pointers/"},{"title":"[CSAPP] Bits, Bytes And Integers","text":"Tom read again. 1 Shift Operations1.1 Left Shift x &lt;&lt; yLeft Shift the number. Fill with zero on right And throw the extra bits on left. 1.2 Right Shift x &gt;&gt; yThere are 2 kinds of Right Shifting. Logical shift: Just shift right and fill zero on left. Arithmetic shift: Fill the MSB on the left. Why Arithmetic shift ?It’s a little trick. In Two’s Complement Number, the Negative number’s MSB is 1, if you add any bits on left, the value is same to the original. eg: 1234Suppose the MSB is sign bit.0b11011 =&gt; -5add a new bit on left:0b111011 =&gt; -5 So u can suppose the number is negative if the higher bits filled with 1. 1.3 Shift Or Modular operationLeft Shifting a number with k bits width is as same as modular with $2^k$。 2 Numeric Ranges2.1 Unsigned Number$$UMin = {0…0}\\\\UMax = {1…1}\\\\$$ $$\\text {Range from 0 to } 2^k-1$$ 2.2 Two’s Complement Values$$TMin = {100…00} \\\\TMax = {011…00}\\\\$$ $$\\text {Range from } -2^{k-1} \\text{ to } 2^{k-1}-1$$ Some trick If you replace the sign bit in a two’s Complement values with 0, it become a positive number. This positive number adds the abs of the original number will get the $2^{k-1}$. 2.3 Cast between unsigned number and signed numberU can cast them explicitly or implicitly. If both of them in the same expression, the result will cast to unsigned number implicitly. Such as sizeof, the result of sizeof is Unsigned number. So something will go wrong. 1234int i;for (i = 10; sizeof(A) &gt;= 0; i--) { // This loop will go forever as unsigned number is always greater than 0.} 2.3.1 Casting And ComparingWhen Comparing, signed number values implicitly cast to unsigned. Signed Number Unsigned Number Relation -1 0U &gt; -2147483648 = 10…000 2147483647U = 0111…111 &gt; 3 Addition Minus Multiply And Divide3.1 Addition3.1.1 Signed NumberTwo’s Complement Values’ addition can present addition and minus,. When you add two Ts, you may drop the Carry number which also means you operate the modular with $2^k$. eg: Two’s Complement Values: 1101 =&gt; -3 0101 =&gt; 5 add them: 1_0010 =&gt; drop the carry 1, result is 2. But if you see them as Unsigned number, this is 13(0b1101) + 5(0b0101) = 18 % ($2^4$) = 2 3.1.2 TAdd Overflow 3.1.2 Unsigned NumberJust drop the carry. 3.1.3 Multiply $2^k$ or divide itmultiply is left right shift k bits. divide is right shift k bits. 4 Memory4.1 Word SizeThere is no a accurate definition for word size. Word size present the number of bytes processed once. Why 32-bits machine only support 4GB RAM? 32-bits is also the bit number of address, so the address is most 4,294,967,295 which is about 4GB. But 64bits is much longer, which can present more address. 4.2 How is data stored in the memory?Big-endian And Little-endian, Most machine use Little endian. Little-endian means place the lower bytes in the higher bits. Such as…","link":"/2021/01/10/CSAPP-Bits-Bytes-And-Integers-1/"},{"title":"Diary-02-10-2021","text":"6d0d0c4675815d45a6112a049763c40803878caed081f4629af07c2e15d2240d50b271c22b1ea0bb2753b6124b30dd639094df14fa5ce44fe02e4ea53c22a9ce5f34df5cb440c1205b8b1af7092a35178d3f70c81849e87e4a075332e9452a4252ec0de0ba1966fe62ebce3aa6b833357648c4b473dc0a6e29270acebdd70684f339a589bdedb8abc5c635f2b0a47ec48775c744f51f7f1de9dd72281c96ce4364fb0756275dc924192747c083ac263bc8fdfcc0b54d45e46d37991c2ab7456355d56c1055fccdd2729c1e2e8f06ffacd86ed08ba9592b7002c0ed8e22ade1f6f64aa9ed76c529bb6298d4710a643b3735e3411dbcdf250f84085d0a7828f09a82c12737aebc9076d2c9d4ab13387193646d9721f23ed62d6aaeb4da6badb0da726876d4bf12fe8db90ab80e07eb0b049d9d9fc09eb7707d0377adf49945bc5a4a729874ac74e29655d0aa23116eaf0d I am lost in your heart.","link":"/2021/02/10/Diary-02-10-2021/"},{"title":"Diary 4-2-2021","text":"6d0d0c4675815d45a6112a049763c4085f986a1fd9632e6c2b9a468672e69ee4f4ff8e148fbbd5b3bfdaf12700f985346b405565b2d04243508208775abe57e490d110f1a5ffd6ecc451e2d480a0c7ad8abcec170080a5ca8c410eaea0bc9eb849b74a51e391bcbbac600f68a5aa4d2d2763670bd319b091c51c6309d70c7790817622268e09163d41549e7e37f8e87b003246501d7a5d7119e71a6ea8bcbe76e6896e441e85f1ccba0d82b0659e87714007408aafd88fd02770b685dcb00d86e5d7dcd9f4e0d4603644786dcbc7d2193f7068e39dbe3102f121d8cd12f0d7d19abdf7f1a60b6952bb8f769b9314c103b031528f0c6cb398a0eb844de6ddbac258685513d5a30413a06c55f1a1f0eafda7c8721e8687b0ef66f1c7e3573cad9f8e02e4ff54509e294dd7494d8bc4c5f75922483f64b56a8308b032a3e8c82443b6e96d594ad38472a43878387d35cb984bc20b1b72bc8c45fb9e0a8d778c213115505b11d853dec285b32ba483cb3d869e47bac48b8aa628281c6a0e9c4c0537eb881dd0c8294e6018e27f88503c325dd11ca9efe24c521c7adbf1bf1ab3f5d41be901b5f23ad6b88a3bb201157627327641cf48d2c7dc25fb9698979bbc2826d4ec3c6005136110cd287fbdba766e50fd62c76dfb6c8e603643c2b63984b4b9f5132ea9fe02de9b1b92f6abb299df8f50cecf701442ab3d999afd6cd61a650be084c59299c7ae18795503f829e41142222ce69d0b0340b4d043294d1e686de9f8f42f32954cae26d63e8a9e5427553a67222acd9212f0648a230d2f617cfc3a70ab2d35365d8aae33e796b398eda9bf12e56baaeab074eabb14574e4eaadb03f24c0dcdd5795809d0cbd57d93e4de80544f2a8691e6ab3fefabe0c02adb0e37dcc6d1c7c0e7281cae8d05f44961a367e39b1e931a5d91e625e2294e6131c7d84723529b8e1c7d958bfa81082d11cac72f093386002a0689e65dc1d0d2cb6fe97eddd3cc185bbfed38e9a71c7bb6e08bce2c380315fe76da35f913605a522292d7ac24b5f488695162a6115ef8e58607f10aa09c1e230e9fc01c2829a73cb997e451cbbe12c2948dd7956239643dfcd31ed73dc4742863442b43a3a5f70307d8bee5345fb79a0aa4bbd4615f1ad58d9720f15dc9677b99e8297b8781aed95c28779397cab2a8b68000f978b5d0612ed876b60a92eab7e3c6cdeeb309b179ed79b34e756c683500cbf134e4094efb0351df55b9fb086e0b4656a9c92930a0a6780c0570c242ad777562c5b91c8e49ace936a378d571554a46aacae44b2b40108bf2b1c07275468d402f182fa65ca03ec777b2ad0c1d75036b6a8f19fcca9b3a3dbec555931d2db3b420f2aa6019e046b988081ee9baac987c8313fce3302c85f50c142469cc347771d18b6755dd2ab902a198bf2282024c000efbafa6eff7ad3250cb7da5a49eeba70cdb767ef52384e21c833ec938485345cab3c51655cdff35df43a1b0c05ef969e503eaf7bc0a75e6cb385b267c39541855ff5fcccb37298162bb72a526c4066224035d5045b4f268c59e7cc826a1d1ddbd4139b6ef8968a0492b8406ea866f76a7b0f063b34e58c1a4cf87788218fc11d40eb4662c7a3a855bebf89c78a9d177dbdaea3247d3c1f9e57a14f6e6287625616fdaed0af47f0d072a82d8e6c2393ad2a8920ea0ac6ce88f73e3600c97d222103bf41b24ccb34db912a2a92a6464cbb49ca9d3d0c13f82fc82f5d0fc87c1ae417c9b4042d6b2da40aa211cf3bdbfc4d8918bf608860f66bd1666af2478352cde1bc1cb6525ebbbd3e6dcc0148ce4e4a9c6c458a67b18b3023a94adbcefa8b63156ad6beffe63724b7af3893d9ab40c9b428f2a056f7437ff0e3fa4e2b0a966bcd52ef8b7466c60996d92911cab2f2f5a17fd69b2cdc11ffc79cde862e6a7aab1a7826034a29871f515b39012f48c83a1373e9b5cb138b4d7f479ec0f80820a40d954de70a2b5c0feb3b76a626847950356f27b778d7a889f7a4e605760748b5f04ad788ecb7d046277184c962d33e0ed4c697dfcf77e2d548cbaceed5de7f682096266a25244acaac807a430cb34c52062e4f80c98f10e8707642c35c2a8425dee630ccd28d45dfa6d7ffcb8a3c2f9028a62506ea0d8e8eea548298e6d8f933dc3ad7c0adce7340f938934ff8d7a0da55dfc1134f563685409833c6ec48960df190602ea64b3a6ae5d281b17f5b760c455d93c686465efb765928f83ad25d7dbc3e69435403f88a227b082294c33b68e9131c1b71bbc009cbb385da01440add11976cec1c025f6860d69f7ea2033652a2acf5158316f95dd7302c97ad9f0e33f0903d015cd2ea39adedfeb6d3dc9f8f7f7a205a168a47f5d555bc943bacf3391a4fe418c965200036f31b8cfcaaabb7f091ee2de688355232447f17a26af4a28e94570c7fa64de0d55dc7ddb3f7fc56c88ff29d7665e502889bbdb484db6cbdf67af50bd52551767a5ae8e8dc73351884e4f05031160da0c64ada1aa458997e376367ccf069dde685e5dac5c2d8bfdeb491bbf85da141f81a1bbc19429ae5ff347041911bb9f39ec80744a6ce723755fc036a0ac4e4e22907b3766ca541258e8890b01e26478bc095fd99f9c241f146856f708ca9a9585dd170139d3f5c73a47fbd3d045a3456ad1fde06508dd3e8b9750f0dbe2c589a2871e8ef4ea9a298b3fc5a207f999980d5eb6c2cdc70ca0005ec0fa790ca8c55f544aab7176c1c234ff89fddbaa1897be87407f4cb26e08b8a590cae6885c205852aa539827a806d324904849087d97b58506f53d2ca44fe5f42e47603979f71c423d212033120ddc8c57aaa7704de9fe723d182ba7980486dd0767214e40a797ab0d107692a3c857b7aa3ce37cac10c10424523e9627f1f7a1d1a94f0c8a286ef24ceaa913d7b4d30041936adb91acf2fe35d64748aee342b57e05eab3b14efa97e6cb12eb7659b7980e24d435ae976228d7af4e2e6a1dc8c10fef10c55516f39d5b0fa5cd84a4a62858338258fc94622a6804c82db337043088184b526ac8bc18db05cb2d8f8b0e7e9ed454623ac8d702822f01cda3390b99bc0c110b31414482ec3c3526a7b0cd25a0ed85b302f64c57d2ec292fe6d6ac7b9228bcd713fb44c909bb6a069190cc2785b27252f31ca4aa15aa0f4e751a3fccb88b22b355437f1848c3bfff5f328aaa50a30696d46a7eba915b32529f6706c5d08c6a99503bcc87133169dd43f60cde3a7a0c0d8734b7fde7b8b3c3f4b0440b0bc97a4ac8c05a4c061c1226e6adf707e3004b3cbddf80e3cb496f7ffce654bc1624a6eefcb9157e843877ea79dec959114422c994b20043950d3c8c94cc6a90ce2a56d3d7d126fb6e6e214ab99e0b9d69d48fbbd1ebaab814dba471574d40c1671a393a7010ef295122b7912085cb4320ce02e54377e9b9ee4e91b03a1db2e8f50c102387fa118b66088f612575bd81bda2f87b94f5f7a4366650abe2fb1e6bfd2ec7cedd4170b5689fc95a9a594fe6dbe6330e8532c44c862c53728a0f4b3810d68d6c14f41ba3a2906d4413432a88b3cacb1be8eaf886fd7a0ec39de1da6f20122fc65f58d06d5000d127119a3555a96e3ea0a797d516f7d460836035fd98aa5e3be59de9872e82e5f54befb2a2c360c76dbc8289231ef5dd67aecb8602345bbcb43b3ad28ef80b15c5219ded73cd7648b96db9756d8b235c649df665d588967b412ac5f2c36cccee848f7b1f55c6625a1b242c29612d02b1471b4a94feebec955a3ac98b2f1a4062f03ce9fb8a9f4eed56b4ed00baeee6eb5840f7dfce1f04ade263884c081d1fb5cfaa977986d68cbe25c229c689cbac6d6451314e47911f096c3c36b60a6f59e61b5b206c6c532a874466e9dfbf0853d55bd020105e7bcd07655c5f67cff7a774871810e80b2d79fe7846e046ffab893af2502c07d4e12067db7701b9fb160b76995b68118bba49b7e2bd22162b8e74e07cd5c51d9405e3fe6f20a39169885f8b50069aea27c96e5b4dfd0b75dc22d0a3394992bda741e850ba8f5dc7d8a144d368d05357eb6a0c2fffb863377b03f6e6b563ced1253f03f6da083d5fcbb50018274f4fa407866f03726d3ec051ab9b869ceddd29de9b066bc53c728f3dc2db0caf033eaae63201b8f8f74a0bbaf9b351ab5ad19743ee61525616c305ecde20c8d9507b414dac78937d4a9ded200bc8df35afe31a76f9a866d17e09bf701db3fe7540bbdb8c4c27b4ea017e8ab066fa9f939953631b45e5675e8be2415182edef0235da5baf0450830a929f74c89e89a5c78911e43f68a12ef832313a61 I am lost in your heart.","link":"/2021/04/02/Diary-4-2-2021/"},{"title":"Diary-4-9-2021","text":"6d0d0c4675815d45a6112a049763c408fdbeef57a5ff2892045e6bb8115b57edfc51e7f3516c7bf03e3048b50b196e038d787318fa63636cd7178cf8d113ebbe75316d17fedbfdeb795e33f3f189bb4266dadfa16fb060d4073e82ba126582e14d2cf5e7e73bd6cb998573f1f2012bc6cde06b58873cd3db55e3ade362e1508c4de10e25c2f4d7df9e576ce662c82e5f862a22e71c19181f2e443f045814088de7d436487a771b13e88a34afc9643acf1a4d3d37a272eebdfc69c2d5c1237cd72d4232f80dc94425e3ad25835ebb7b63d5f33b918525836edadff7f501abbbf547c1661ced711e60a2e321173b4b46bd48f81c5e3355581e07222057194b7550d6489186c3cd0a4e84f09b33dc3d3cf6bd42d7abb574668c346b99c78b12cbfb932bd71252bb531d1c679a7048cbd1ca7627b81e5451193b2f2a02681973789f3a4e4ea3e6a1a8dc8b1a7ef6da1afae663065bb7423674833999c4f51137e772f2b1f26406f9a59716051786f170008dd527903ffd666fbf9988033552276991bc7d807c7df267daa8ded93775a25e6acf3746d265ef8fba78865768c3d75290a0a3aceaf1a15c44dee05fd699a2c331ac7b1fe3b25b1b2150ee1d2ca3f0203e10abd85057c94c2a3873b4c7666f00a9362daaf3ae5bbd6136b6e113c9bde089da96b77afeff1143d7db970c6e4e4804c02712b6cebd44958438699a8a910208f1bed0133c76e1f3e5ede04b6419ec2fd2775e590b161c93279f14940a8c52c09f44f6d3ae8ef2aa800e32d05ef257ac4b800577394caa0c0f5b13f60bd678721f236d5e400745ee02528d28b00904449db763c580ee253facf8af1106266519477cd80823f1fe828ed9ec6db80b678fe6f2a698e5d3da71bd635f99a7a08b3ac7ae0a77a489ceacb87e281597745cd76f83f8e25298c36c98adc43a88b37855b48b08cbfeb362954be3341d99ab16152e97793ae587fcbd8b8af0eb66eea363a12c9551ea5ee4aa4a03b51f2f356653ec41f6db59711b679cedaf8baba4e4446fedd647752832445141e68c59f315bd273b9681b4e3d5379de9cac8dc616581a870b5d44eb3bb0d5ec145f2b6ce784a6e528bdc0d2d3974a33ac045603f76f97e39700c57aa80fec9b16ab95d4c87b0c0cef1e8d49d571498641313a12c31fa46007cda31e60e85a0bd1e63271242a0e946f076b43564a775a17bd0454de141 I am lost in your heart.","link":"/2021/04/09/Diary-4-9-2021/"},{"title":"Diary-4-13-2021","text":"6d0d0c4675815d45a6112a049763c4083fd442bef87c1b975bdbb56b856c6e2ba6deaa45df58bc4e0c5d7df3c1bda2be8cb6ee4e5e0499b4f1dc297c82fb963e597b491a08f4754839bff96f170b6a802c1ea97004304a79d7117f902573351398241616147f9b027dcfdf4ed5aeb67021dd6baad87322520de4117b0c52fa6506deb2739a47c45cc5401808bfac6ed86f85226488df0807a1ca58601d5ee61a77570be458af447d2b3a2cdc1a4241313cb393c9855636387f739d829ebae8aeb18c28163e0fc6ff00a9ab35409bde50c7d6d08f0027bd431c04df0db5bca36c118e01f5b5dd1ac43b90d546f2b5e7e2fa3381b3c51c5eb4a92d1afc9b200b6c2c3353802a2e061011375cda5fd0b8d942db127711cb11913d22df4c8806805555448f55342af7e2cede7969d4bb7b5dff18fc034a09e6e6811f9098965f61ccf68092cb07ad159ec50dd29035cc4429c94de02e35e76f998a4f32d9ca9ca66908059bac0724d5f580c2c3a3ae9db3e2054a2d5a9693f60ac6deb73a844ddb269970d01617bce0af9e31e9c16aa5baeed010b133bf50abd0bff0d3af408710727a5ce1e95b7452c5b4f9aaabae2e3df153d2e2fd8a301a731a00a06855354d919ad1c9b118158f3b71ca6eb8b9171f6b6bbfd989d4a1005d054929e5618f2f3930a20997fa1a10cd2cfd8e8161b7cee723109d4e5036c9c96c17fb933ab265bd42fa6ab99be88f310235adcd894a275a5c11ba78d47410c720e4bd0515d708af5e8fba072569b5df32152caa43a90bbee03a7b50b18bb5932a600ffe8012c45c58e941cc2cbdff2eb47d44f3b2e8dac5f50ade9a51c4fdbb87158b07ddce1886efb43113c145f12ed39947e900cf9cafb372379d95f08e18b9f2adb4a9d21444b8c8cf662adf5dc40326bc7804712cdeb2f00382f20ddc48137f9db99594cdf3a973ebe7031ed78945ee4524a3830afb98223eb9f6ec46c57297cee87fa74f8312ea3922025bc1071a50aecea83aa1982dd217d132d02ae2e57276633f1ae54edc6f7f31d751f06742aefaa8079fcc6910036eee4d6d19127f8c958c129b22125bf5f9bbe916f889fc85ac826184fde9a1fabf4f0c538de138edefb8e429cfdb5f774217f545c6c03d5ba00532288f6120556a734e621f16c8dad627b1753d3c864ab698d79d79f9e97c4306a4d2f30a18d19bf9de37e454dc4785c718d6e23b0e1479bca07dcc3034ef4ca8b3bfe719e114a1c8388f69a8417a5796c1f861dd9e9516fe7bdc201e406c07335a70c979d1d991b9a7770add06fcab433b7afcefec09ca5d27bb6ee5f69ba6227506bac5dc2f5920f0bc06bba4d6a81e305ac76138919221054a8bfadf4ec0cdb9636111eebf48381137f67999cdb11e21995f26723c25d2e3950ff124978479e9551c0bb273d0d9c64d386737c941d07c250a0eb4207782c2d4267d32afc3a224d030f01f732e883087bfc6de2a2beae534f78a7710e657fdff26f371acf62f4c7250d744da4428b503d3103607ffb48a8b36e5ad816eb2de4049cfd2977cfb8866c23f9bca9324309e8ea511c40cca7c48b8f3c088806689f4acd3be0a303f1def01caea5cab96f09ad4569ba2f9c879e87d4ece2fa877c8d5fdece8e4abc68f622a6fd27fced8da6a88ab32c93804618e177b242a1a4aaf5bd7491ccf71d33e02fea458adb808d954ff7b8d0db1919019f9017da8a236a9d6379f7c480e82930b260188f2d60105e1a899773cc5848789ee194b6fb706c17f90370e63d13a7747d204dba64ca1af7fc552d7b88fb7ce7ecedb30f1e50ecebff6c4ee3b470f01ff69b1bf4c325db9e2603022202987b9f1fa5fc7a99dc6f27677e81775494be2a8ea8d27faac8df477a18047d7c9b8797e5bca0241cabd8b7abb3dc21a0e103d438608ab370cc9569407188034638a70b63c975d8838c30b89b82d0902ef6f4ebb21c41622c80188e935e0a54280beeb544e0461956fd5c5e99be0a81909630d94f7a996fa4cc11130a660aa36ca705ae8d786 I am lost in your heart.","link":"/2021/04/13/Diary-4-13-2021/"},{"title":"CPU基础 一些记录","text":"MIPS CPU 基础 睡不着，简单记一下 CPU 设计考虑控制器和数据通路，数据通路提供op和function给控制器，对于基本算数逻辑运算，可以根据op == 32’b000_0000和function判断不同的指令。数据通路中仅仅包括数据流，所有的多路选择器的选择控制端均依赖于控制器。 CPU core 再和指令存储器，memory连接就好了，一个基本的SoC。 数据通路单周期CPU不考虑流水，依旧分取值，译码，执行，访存，回写阶段。 讲R, I, J型指令的数据流，和五个阶段对应就好了。 流水线阶段之间加流水线寄存器，主要难点还是数据冒险和控制冒险，还是不清晰，这周调试好单周期CPU，周末重开项目写流水线吧。 控制器单周期CPU直接根据op, function 和控制端输出对应就好了，case，或者去找最小项。 流水线在译码阶段就要将所有的控制信号都算好，传给后面的流水线寄存器，一步一步传下去。","link":"/2021/04/13/CPU%E5%9F%BA%E7%A1%80-%E4%B8%80%E4%BA%9B%E8%AE%B0%E5%BD%95/"},{"title":"Diary-4-14-2021","text":" I am lost in your heart.","link":"/2021/04/14/Diary-4-14-2021/"},{"title":"Diary 4-22-2021","text":"6d0d0c4675815d45a6112a049763c408cac670e8ec4aeb46c4903d4ab9ddeb5056ee1632c3e81ea3cf281447c47fcea57c06ff8a4372b4ded555c2350ad950e8e3c7c6f67d918e7b9d2f9fe28c642e4c1679121b0d41420e4ade26832a9171a3786d936f08513661fe53b8347ca3e04dab22f80ab997df6b26da715435578c10c130b40f8bd995a73081152c087867653a5749c9f180d1834e82376891428e40aa94b28ae1f9e6b27eb3cf0402f5bb0183a54c474f7af6af029974096dad1442454efd33d97beffb999f0948004a5bb0531b242029c19ab238d63a4ef8fb2f507485912d93be4fb7c02fd5c62edf8502acd3387528798776b2dc051d1db31894dbac3442919a3166732daf1b0094907da99df7c3cf30d487ab46d743fdf0e315218260ed5f66ffe33ce813db7f0bb997b02070c917ee07bcf4948130404e1fef438d53ae712c62147c7d1e0e5858057cc7201c0740f900deae40f7922a05b46477517f37aafd3930cf87192e1644c542ea271d88bd54edbb9f07ff9725d4ababcf8d0ed829449110ebb01ac21d4e2e8f532becb021a71d7470d31f07e898de1d4a69145cf1db48255ce672cb418f36da9cd93b750bac95eb4cb097ec9b590c0fb30c991eeec1540c806f37865779a5049a0b3c98508c806e6bec0d91489d9da0ff3185143f191deb8eafd97eed8173a61057e1a5ed61394a0e3926c0a75d0f2f1f206d1b08b0dcce2b2c7328ed031573c0e939f6ced727944dfcc4463ef569d57b6aa6bfe9e807a2b32544ef1aff17fc565218e5919581030009b8e19d3c0ab26cdf9e9ca1552ce0a86301b0f2a8f30be7e88fd3da161cf1cd994bae4cb784568d46ba98daf5914883686a50b35acef0663a21062e882adc5e9d2316b11746f42ccce4f52570928247a2c0dc18949e81f127178beea76e6aa79b10c6fd7ac2002c5c8e7f5bfd9715d441c9508b23341076c79e4df8a0c2f0a24fe8e4dcf0b1e04c9fa8e39dab1dcc914e2ea699a05cf97f300b4ef7cdc4cc5e89d81274a984addd37c255b873b910c84befa8cd4d08755ef49f4b74ba6b173f339e5b056b621ad56a1c79edfe8ad44f5dd47bb415471c124d999b750998f6d01077e572029c869629d6962a269c6f69ef3f10848ff20cb55191e4f26d76e74daa8a282b3b564effcc8bed96ea7f1cb789d44c821a2d727c3947c3e4f3ac3b68829cba6b0319c31bf65eadac74d96d645ccbba84cdf53657d7fceb04c42b75c0a6a8bd250da8edc94593d864265ff56cec5beecd5a2a777df8da3dc4e2ed1ec7ca11967eff972d38e8cc63730ba6e7f68527969060a47aca580dd8a866e8495782c99cb6d3e9cd0e8fc9e5c472df0bdbf1cca0e80d171cd25e50200a29453efd98b40d5fb5cf05f53fa74856976012b7bbb99a3a3be29c778a57568d8979ffebffa8e84955e88397c055a998e7def74ee186429371198e6cae39904af5aba053821313916162bc73b04ba2ee3894831cad09a5f8200c163eedd269ba62c77a5c67bd345551fee5 I am lost in your heart.","link":"/2021/04/22/Diary-4-22-2021/"},{"title":"Diary 4-24-2021","text":"6d0d0c4675815d45a6112a049763c408e75fca099e3fcb18ce86a5593eea21b35cecb3660bd44f0d675439a1bac217f87428e6a24c24423a229c879637254bfe67ea76c7a2d515cdd7003482b61cb016de6acfdec9a1d4ed989684f6fba043143c8d9a78b9cfab6e5c39f8c423025059cc57617e5654da0543b6f4a770dfaabecee7e5d753a396f57bfed2c22ee1f514e1f2dcb7159004b803d98319020712826f7d0b8b141a800824348c4234a11a81fcc8679e285148c69e785eafae62933bdb2a7ae45227658b32ccd8a8a9efdb8ba372715a943d1476a078bb903c8756638b0dbbef017ef8361355099661e8573e0c7d7106b9695fecc06bf6ca8909f4bf7eadfb1a76db565b9d3b43c21f6ecca6a31f235b5af8527d6de5724f6e1cc8fc114cedff1548d5411366044b20a3c5c5d1957d416c5f3313642b7b1fafb1a7fd6ce033df0e6581bc6f55f75ecc5161449a7dfa4ae035344cdca158b6bd1a204fdcfe1bd9564c623e24093da06b06a14f73fdadaa13deb3624fa9a7121210a5d2a177e19261e24871d1469f7142d191d08f4124068fa83f7dc9a60cf3745072e2196fc11cbf785644c370fd92708a524500eba8ce6e941a090642c1c52171fad205ab21fb1f427b755b69d29e42fc634c9f3e8b04de83a7e1d8dbfa00bfba14c846bcf7b4d419da6068d0b7df41ac2fb499f6f24773ef24b1e793bcc58f230472a6aa8a4417d2d244d67d94a90c6fcfdae1d0c29d96f2878106b335a68554af7ef85b039b08a1d4807f94840c9bb58bb2b94c46ed2ced90948180c91a413bc1a41ce860cfe9af6dc3fed51a8600b978113d612be9759532594469f2817e29689c904643aeced40c212b235f740947668fc51e7135c1fb72dc37e0ab2cf64f9e3c0354201ee60fa6cc5ad5a7720da711978b843227a1416ff32f437c3ec97ac0e7baf8ada9d21706ac64733b5f4c062afb73f2edd70a060e8fb69734249a3add4737d7e59c6f3b392a570ca0195eeeb772456f827f5032b4d209a660bf853d665e6b9eb28b145599f4513e9bbc778c2fd7d23f4ab2c1f88273d8754fd81788f3e9983b4694bf99582c80aa64cdc1ee144b1b601adda058bcef99c4bf7b6a10d187410c2be15461c3056a1dacf6b26a1e292710b7b0b80b4caf71939cba2cdc26f0a33b0b0b98cd5e3704b2d66f6612361f337a58b97f2c8c14f901c01241d52f82edd45467975912dc77176eac6b7065be69ee3f6af41b020da36a4e81135f51d5dd4249267270bf027feeb5379fd1f4fa184162f97d5d41f79128fba7f31c055796c374d4f510472973d83497bdfe21dc3e58223c4cb7a54bd6892586429bbc3cebd9c4bdd8f1ba3c721c0ecb609b415316ae5048e00b9a185e187972c65e9c8acb63d99429ecdb540a98fd6405bcb1150c1271a155c51aaa8dea30eaa7c08361b0bb11fb8a38fd20d4250ca67417525909abc3cd4167d6a16f2ef55d0f6f743d4db6f4d6662ae0b0643f98b6b38a58985c06c72cbee7918c8630bded652bbd13b85307218c206d50b7dba32ad6ea3e57a07f5bffe88d59e4397dbf3896a86204172324e8b72e7879901933aba2840c0fcb1442b7f8b54bff264d91e162211644bfefce39de0685fbd625bc394a8fe7a8056273db5fff972f4063c2a24a7c3117b9c0c73177509278b310735ba86218a4f94fa33d0d0262338f812e09c7934f6acc6ba255de3736f85621fbc2957c034f19fab1a46b1cc160432660f7883f2cafd686aaf4c8dbfff83cd835ae397d91babedaa31cabc07f56e09cfa5390a8f9b3ef10f84a4ff3fb2d1a48f5a573666c84e16b30cea1928bf1ece79fe00d59910c40447f15b3cf1c580c8bd3f4c81cfbc01a6d67fb2d815b7bbe24cb183a0661cc35805e4161effd1e5cc062c4cd67ef6d449faa9602ad95ee70be56b5a14fd32510db1697b4a6343af7d3a71565591fed56e2a13a3b0c8c5c9d6d2bcbd90836b99b9f454abc8bc83f749d1de2fbb213eb073182efe295c52742fa74b9fcdbdd5761805ab6e821a530d94839ae342e7a7b5c1202d439a00f432b0783124b9cf3c3714aa88d8a5ab93fdde89624a3f42c9dea1e64bc726c9c4755caf1b86c812cde67bf0a1b499af054c04957c22f6558b28417948012242bb05a3bf7507491d342c82f3f07e48e9c017d76c8904e0f80249d7893bab59ee9bba0d935c40c9603e289216c167755dccd4f9bea6a8e742386a872f123d92837e5d1c1e500762a879b794d9f6799994db1de2d71f765a3d1175760a3ae8f4c25e4f3bff314ca871f0be64b02c018d92a659ff575b894d3a1a1f050001d431c3b25e77969c24d95ce3e622fd85be1583894b7028ebc78f8cf5561ab7a78514f32237a80eb026cd965f0e68b9eee4be2cb459e826f591ecf2ecc1e98cd61646f413965bce6a20521896dc2360160c965e064e556e30d26a04a9ea98df12fe14e171ef9e35902d77a801f986e496ee71c9afddbdab9c3a8793314dd7908085649e2360d07d1993fb8ec0c6e0077754f3475d1bb936c7e3f071cc95bd7b8441dfad6012d57825641407f0cc40ef2b927793a8f88e05fc91bc43a26bc800cb710674ebf9833dad3a99b3bc4f3e8a496c0fbce78d162453ddb40b30ec74c914b59ea8dd185fd3bcf8d297813dabccb4f3616f6ed43b9228254e38bced83b080627acdafac4a9a0971e2f3d34f29dfbf9758694f22d877c7515d00d47737141a0d5bb9e6c1e3d20b6bf4964186b26a8809af1eef734540568f9a910fbd0bc04decaee9c8b1805de74ed5523e2041c569f8087bb5c3442281b49ef1aded44892a669aeb1688afab482c537a96cd8524aadfaef45221b1524683e7e26eb35443903ba1953c917fa43ef3252e702c4cacb64f011b992a705051c4120abf4be182195d779c1bdde921f5e9c57d0f896259693389f019692add27df23de79d922544edccaf5ae5d2a7a04b6e4b694c314cfa5b5bd041b2b7896fb569f2a60c824471abcb0c3be0a902a36a2ed573bb6e7f7478a94d251be5d58f3f59674a293b69a2c545db5811b92d1eee16e6e3d59d34dc2b396af3dbff3ec14cc364fe975533e739c99f068769afe2f6b861d5bb6e3158ead70664d815856ec307c8780cfa547f20453b506e067ff4bcb0522d6e2c9be805036cdec3ce2152ac85e94cd91af8ffe3bb8e0d0129c1279ea3198af628037eae3cf1fde0bd1eab499dfb567f2a9807cc1560b4b4008741a43db83aaef78dae5e002a539f9b311ee3890e2fed2f42d1f1fd1d42e8b7f2e5a17e425730c0d4223eb78eb52ec040e1ba972087e41a39d9bc3ba82271575dc67551af34a24362434d379eb5c218e118bfb3c5051a6136604ea94a3d74dd9bead21b4e8d955c97356615497b5c92d6bbc88de29619b10d1b8c38704c7d2812c2e563f6e107f964410427fa260f7b34e4b4ae4d8bb404d16b3f658e1a714e71de985c38544a7025a45c6679e7d9475131844e6a911aa7adbbc2734080a5557c01aaac65ab45927ae90dc04bd3cb0d8b9ae61ae10b1ab9b37a318035806589a0823e51573f46c17934578d1a852b06421e34b2517c623cef3325c84c38ba52bd55f894a249d1369220fac61d1f1c5b37ac2272c60a1b7b49f94fdb94acb775c384b16ad35d985d26438ae3f50326ad41f8bb99ba219bab7ac64a1132816b09b0b9ee95d017168407809257840b4ee976a9d5f3b0c8ebf35bcb6ee50c6ea9c220793f5e27035880314f4f594c06db347ebdab05df1b4179d2a2924651268fec5e66bde5908330492e2dbc9f78d3de11b744173346a571198d35ed9d68e6edb5a0f79a73547f4d4ac40dfcd8d35bac927d92cc7065841686e3028cdb8cf655a1e5fbdfbd5e87b57abe757381e338c97e5df3e78d4773d88d667ad412a55c4ad928c9c6dfc40add387e6b4f34ade4e3eaf2973d524f631824a0676b952ab2f4fbc5d1a13a79170f97f22a48ebc5b5a57050acf4e6e559bb3945b1dee96df0795c0f74eee5cc367f7d8526ec9770f02e71f757fb50f7139b2a34fe54cf4d510efc76f27702529bb1e717ef553e1d2fdd54fd36a323eea94dcb8626b14acc44c8b9aeb50adc6fe70475b08dfc72f61921184ca7248b47b8edff5b2bfda9cbd8f6e8d0251093868db430678dd85f4f87535f688041586577c20a346bae431d895b3e26fe2c03241d6140d9d62baac3c866e899d6d44c0d01e1c741aa5b13168345d305703deb278e34c59d33b7cbb208216b7f534b087408ae117efe0de639f0953a85fe066007320deebdfceda7a2a185d71788d11cac21d279079f18063d9b0fcaae0eb8d4bc15c80496cf33896ec8d0a114e8d3f1a1a0b2a78de91281612cd8663b596d301121e63956f87fc5d3db7f96ccbae98e5967d239420a0876dd7b0847b358c6ffa368a3feb680fb8eb4f7ddc092393767eae8ed7675913e7a2a9300d78c910b4df9caf90fe4df13e4762023626c75ec10e59ad7b528561e832fc81f4d112be8af372dacc3f6a5b4b0a82d241c7f1015e031516f3b8c52028dfb42379c9059fe0a29904165bddaadf38642a699baa647412ccb009bc05f0d8bb438c4a4b5a46c43cca2c3472ab93c745502178b8cd59a09a11baa1b6872d7d6587980460fdd447e4d98803192b5d27d04f1ccb021f480bc72c4e2 I am lost in your heart.","link":"/2021/04/24/Diary-4-24-2021/"},{"title":"ExploreMIPS Problems Log","text":"实现ExploreMIPS(五级流水线CPU)中遇到的问题。 一、冒险1. 数据冒险1.1 ALU写后读 EX/MEM级数据冒险：如果当前指令在EX阶段，而上一条指令会写入当前指令的rs或rt寄存器，则需要使用旁路，将EX/MEM流水线寄存器中的上一条指令在EX级的结果旁路前传到EX级中ALU的输入端。 MEM/WB级数据冒险：如果当前指令在EX阶段，而上一条上一条指令写入了当前指令的rs或rt寄存器，则也需要旁路，这时候需要将MEM/WB流水线寄存器中的上上条指令在EX指令的结果旁路前传到EX的ALU输入端口。 ID级别数据冒险：及当前指令在ID级别，但是上一条上一条上一条指令到WB回写级了，导致对同一个寄存器同时读写，只不过此数据冒险已经在RegFile中解决了，及在同时读写的时候直接将写入数据传给读端口。 如果EX/MEM 级冒险和MEM/WB级冒险同时存在呢：显然正确的执行结果在EX/MEM级别，因为EX/MEM级别的写入结果比MEM/WB的写入结果新。 1.2 LW写后读 因为LW指令需要在MEM/WB级别才能读出数据，如果当前指令在EX级别，LW指令才执行MEM，还未将读出的数据传递给MEM/WB级流水线寄存器，那么就需要当前指令阻塞，等待一个周期，再经过旁路传递过来。 2. 控制冒险主要考虑beq 1.1 beq在ID级判断相等如果是单周期CPU，beq的判断是在EX级，通过ALU的输出ZERO信号判断相等，但是如果再流水线CPU中将beq的判断放在EX级别，会导致流水线中流进来两条错误的指令，至少是在分支确定之前，这两条指令不能进来的，需要之后再FLUSH掉。但是如果将判断安排在ID级，级别就能减少一次FLUSH阻塞。 一般编译器会在beq后边跟一个延迟槽，这条指令与当前无关，而beq判断期间流进来的这个延迟槽指令可以直接执行，所以将beq提前到ID级，这条延迟槽指令可以不必flush掉，从而让流水线不阻塞。（不过再ExploreMIPS中我没考虑延迟槽，直接把这条指令也FLUSH了） 1.2 beq中的控制冒险 EX/MEM数据冒险：如果当前指令是beq，而上上一条指令写入的目的寄存器和当前的beq冲突，就会产生数据冒险，此时，上上一条指令的执行结果再EX/MEM级别，需要另一个旁路将EX/MEM级别的执行结果旁路到ID级。 MEM/WB数据冒险：如果当前指令是beq，而上上上一条指令写入的目的寄存器和当前的beq冲突，就会数据冒险，就需要旁路MEM/WB级别到ID级别。 alu阻塞：如果当前指令是beq，而上一条指令是一个alu指令，目的寄存器与当前beq源操作数冲突，就会数据冒险，但是，当beq再ID级时，上一条指令再EX级别，两者同时在一个阶段，beq无法在ID级别获取到上一条指令的EX结果，所以需要阻塞beq一个周期。 lw阻塞：同理，如果上一条指令是lw指令，beq执行到ID级，上一条指令需要到MEM级别才能读出数据，所以需要阻塞beq两个周期。 比如下图，最下面一条指令是beq，橘黄色的连线表示上上条指令和上上上条指令对beq的数据冒险。 紫色连线表示当beq上一条指令是alu指令的时候，需要beq阻塞一个周期后，再旁路。 绿色连下表示当beq上一条指令是lw指令的时候，需要beq阻塞两个周期后，再旁路。 （这个图对于一列表示一个相同时间发生的，如果想旁路，就需要从上一个时间旁路过来，即旁路的出发地早于旁路的目的地。） 1.3 流水线寄存器的stall和flush需要扩展D触发器，加入en使能端和clear清空端，注意，clear和rst不是一回事，rst意义在于将整个系统rst，clear只用于当前D触发器的清空。 1.4 stall与flush判断条件1.4.1 数据冒险的旁路选择 对于在EX级的旁路，需要从EX/MEM和MEM/WB级旁路到EX级别: 如果上一条指令（EX/MEM级）需要写入寄存器 并且 目的寄存器和当前指令（ID_EX级）的源操作数冲突，则从EX/MEM旁路到EX。如果上上一条指令（MEM/WB级）需要写入寄存器 并且 目的寄存器和当前指令（ID_EX级）的源操作数冲突，则从MEM/WB旁路到EX。 然后rs和rt分开判断就好了。 1234567891011121314151617always @(*) begin W_EX_forwardA = 2'b00; if (W_EX_MEM_w_reg_ena &amp;&amp; (W_EX_MEM_rd != 5'h00) &amp;&amp; (W_EX_MEM_rd == W_ID_EX_rs)) begin W_EX_forwardA = 2'b01; end else if (W_MEM_WB_w_reg_ena &amp;&amp; (W_MEM_WB_rd != 5'h00) &amp;&amp; (W_MEM_WB_rd == W_ID_EX_rs)) begin W_EX_forwardA = 2'b10; endendalways @(*) begin W_EX_forwardB = 2'b00; if (W_EX_MEM_w_reg_ena &amp;&amp; (W_EX_MEM_rd != 5'h00) &amp;&amp; (W_EX_MEM_rd == W_ID_EX_rt)) begin W_EX_forwardB = 2'b01; end else if (W_MEM_WB_w_reg_ena &amp;&amp; (W_MEM_WB_rd != 5'h00) &amp;&amp; (W_MEM_WB_rd == W_ID_EX_rt)) begin W_EX_forwardB = 2'b10; endend 对于在ID级别的控制冒险（beq的ID级中的控制冒险） 如果上上一条指令冒险，则旁路EX/MEM到ID。 如果上上上一条指令冒险，则旁路MEM/WB到ID。 同上类似。 1234567891011121314151617always @(*) begin W_ID_forwardA = 2'b00; if (W_EX_MEM_w_reg_ena &amp;&amp; (W_EX_MEM_rd != 5'h00) &amp;&amp; (W_EX_MEM_rd == W_ID_rs)) begin W_ID_forwardA = 2'b01; end else if (W_MEM_WB_w_reg_ena &amp;&amp; (W_MEM_WB_rd != 5'h00) &amp;&amp; (W_MEM_WB_rd == W_ID_rs)) begin W_ID_forwardA = 2'b10; endendalways @(*) begin W_ID_forwardB = 2'b00; if (W_EX_MEM_w_reg_ena &amp;&amp; (W_EX_MEM_rd != 5'h00) &amp;&amp; (W_EX_MEM_rd == W_ID_rt)) begin W_ID_forwardB = 2'b01; end else if (W_MEM_WB_w_reg_ena &amp;&amp; (W_MEM_WB_rd != 5'h00) &amp;&amp; (W_MEM_WB_rd == W_ID_rt)) begin W_ID_forwardB = 2'b10; endend 1.4.2 阻塞控制 对于当前指令alu源操作数需要用到上一条LW的目的操作数，需要阻塞一个周期。 如果上一条指令（ID/EX级）需要读内存（mem_r）并且操作数与当前指令（ID级）冲突，则需要将PC暂停，IF/ID流水线寄存器暂停，ID/EX刷新（ID/EX刷新就是ID/EX流水线寄存器输出为nop，即，对于当前指令在ID级别的输出结果在此时钟周期不传给后面的阶段，传了个nop过去，俗称流水线冒泡）。冒泡其实就是在流水线里插进一条指令，nop。 1234567891011if (W_ID_EX_mem_r &amp;&amp; ((W_ID_EX_rt == W_ID_rs) || (W_ID_EX_rt == W_ID_rt))) begin PC_stall = 1'b1; IF_ID_stall = 1'b1; IF_ID_flush = 1'b0; ID_EX_flush = 1'b1;end else begin PC_stall = 1'b0; IF_ID_stall = 1'b0; IF_ID_flush = 1'b0; ID_EX_flush = 1'b0;end 当前指令beq，上一条指令alu写入目的寄存器和当前beq冲突。 需要阻塞一个周期。 但是如果上一条指令是lw，并且冲突，那么就需要阻塞两个周期，但是两个周期怎么控制呢？用计数器计数嘛？不是这样滴 = = 会发现如果lw在ID/EX阻塞，那么EX/MEM也要阻塞，所以判断两个阶段(lw在ID/EX 和lw在EX/MEM)就好了。 因为当时设计的时候没考虑延迟槽，所以对于每一个beq 在ID级判断的时候，会在IF级读进来一个”危险的指令”(因为在beq确定之前流水线就不应该进来指令)但是mips设计了延迟槽，所以这条指令就算都进来也没问题。 但是当时我觉得这条指令就不应该进来，所以在IF多都进来的指令，我再beq结束的时候将达FLUSH掉了，就是$ID_EX_flush = 1’b1$ 。这样其实导致了一次阻塞，性能有所损失。其实这就是延迟槽的意义所在把，把这一个周期的浪费，执行一个有用的指令，让流水线不用阻塞。 1234567891011121314151617181920212223242526if (W_ID_EX_mem_r &amp;&amp; ((W_ID_EX_rt == W_ID_rs) || (W_ID_EX_rt == W_ID_rt))) begin // 表示beq的上一条指令是lw指令,如果冲突,则阻塞,插入气泡nop PC_stall = 1'b1; IF_ID_stall = 1'b1; IF_ID_flush = 1'b0; ID_EX_flush = 1'b1;end else if (W_EX_MEM_mem_r &amp;&amp; ((W_EX_MEM_rt == W_ID_rs) || (W_EX_MEM_rt == W_ID_rt))) begin // EX_MEM 需要读内存,其实应该是表示beq的上一条的上一条指令是lw, // 但因为这条lw肯定在ID_EX级别时候肯定将beq已经阻塞一次, // 所以这个lw指令其实就是beq的上一条指令.中间插进来一个气泡nop PC_stall = 1'b1; IF_ID_stall = 1'b1; IF_ID_flush = 1'b0; ID_EX_flush = 1'b1;end else if (W_ID_EX_w_reg_ena &amp;&amp; ((W_ID_EX_rd != 5'h00) &amp;&amp; ((W_ID_EX_rd == W_ID_rs) || (W_ID_EX_rd == W_ID_rt)))) begin // ID_EX 写寄存器使能,即表示beq的上一条指令是alu指令 PC_stall = 1'b1; IF_ID_stall = 1'b1; IF_ID_flush = 1'b0; ID_EX_flush = 1'b1;end else begin PC_stall = 1'b0; IF_ID_stall = 1'b0; IF_ID_flush = 1'b1; ID_EX_flush = 1'b0;end 整体大图，当时没画全。主要看Hazard单元控制的forward旁路选择信号。 二、杂乱的问题2.1 RAM ROM问题使用Block Memory生成的ROM 给读地址，直接输出数据。 使用Block Memory生成的RAM 给读地址，在时钟下降沿读取读地址，到下一个下降沿才输出数据。 使用Distribution Memory生成的ROM给定读地址，直接输出数据。 2021.4.27 更新发现一个问题，需要考虑虚实地址转换，MIPS中所有的地址都是按照字节寻址，但是再访问RAM端口的读和写端口，都是按照字长寻址，比如32WIDTH就是按照一个字寻址，所以无论是再PC中使用的instr_RAM还是再MEM中用的data_ram都应该是将输入地址除以4。 2.2 IF 取值因为RAM的这一特性，所以将取值分为两个阶段，preIF和IF，preIF阶段计算nextPC，直接将nextPC传给instr_ram,等到上升沿的时候，更新PC，下降沿去取数据，从而使PC和取出的数据对应。 因为preIF预取值，所以需要$0xBFC0_0000 - 0x4$ 。 2.3 流水线寄存器状态保留因为是流水线，所以在某一阶段，需要给流水线寄存器传所有后面可能用到的信号，比如在beq的PC，PC+4是相对于beq指令的，所以这个PC+4需要伴随beq指令一起传递给ID级别。再比如写回RegFile，寄存器使能信号，写数据，写地址需要从WB级传给ID级。 容易遗漏，容易想当然直接用信号。 2.4 ID级和EX级的旁路选择一个三选一选择器，将所有的rs rt旁路选择。 2.5 MEM访存因为访存mem用的RAM从而导致读信号和读数据不同步，龙芯书上建议在EX级就越过EX/MEM级流水线寄存器，直接传读信号给MEM，等到当前指令到MEM的时候正好读出数据。我图省事直接用下降沿触发了，据说上板调试会导致降频。 应该没什么了吧 🦔。。。 三、下一步？看了看其他的东西，觉得离运行一个操作系统的路还很远啊，很远很远啊 QWQ 下一步不打算继续实现命令了，其实都差不多大同小异，应该看看量化研究方法里面讲分支预测，双发之类的东西了，主要还是致力于提高性能。 看了看中断异常，完全看不懂，好像这东西和操作系统联系挺密切的，先放一放吧。 嗯。。就看量化研究方法，和系统基础这两本书吧。下一个阶段应该是尽量实现分支预测了，先看看再说。 抽空还要看看给的CDE环境怎么用，明天吧，明天看怎么用他给的Trace对比调试，跑跑CPU_CDE。 没了，回宿舍= =","link":"/2021/04/26/ExploreMIPS-Problems-Log/"},{"title":"Mark","text":"Mark. CDE Labs Branch Predictor Exception CP0","link":"/2021/04/28/Mark/"}],"tags":[{"name":"Spring","slug":"Spring","link":"/tags/Spring/"},{"name":"SpringBoot","slug":"SpringBoot","link":"/tags/SpringBoot/"},{"name":"math","slug":"math","link":"/tags/math/"},{"name":"Linear Algebra","slug":"Linear-Algebra","link":"/tags/Linear-Algebra/"},{"name":"Machine Learning","slug":"Machine-Learning","link":"/tags/Machine-Learning/"},{"name":"Entropy","slug":"Entropy","link":"/tags/Entropy/"},{"name":"Deep Learning","slug":"Deep-Learning","link":"/tags/Deep-Learning/"},{"name":"diary","slug":"diary","link":"/tags/diary/"},{"name":"C","slug":"C","link":"/tags/C/"},{"name":"Pointers","slug":"Pointers","link":"/tags/Pointers/"},{"name":"CSAPP","slug":"CSAPP","link":"/tags/CSAPP/"},{"name":"cpu","slug":"cpu","link":"/tags/cpu/"},{"name":"MIPS","slug":"MIPS","link":"/tags/MIPS/"}],"categories":[]}