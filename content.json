{"pages":[],"posts":[{"title":"Build a Simple SpringBoot Demo","text":"Integrate SpringBoot with MyBatis. 1 Build a SpringBoot Project1.1 Spring Initializer 1.2 Select what you need 2 Integrate MyBatis123456789101112131415161718server: port: 8081spring: devtools: restart: enabled: true datasource: url: jdbc:mysql://localhost:3306/boot_test?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=true driver-class-name: com.mysql.cj.jdbc.Driver username: root password: 123456mybatis: type-aliases-package: my.space.demo.pojo mapper-locations: classpath:mapper/*Mapper.xml 分别配置了数据源，和mybatis的类型aliases，以及mapper.xml的映射文件地址。 2.1 Scan Mappers1@MapperScan(value = &quot;my.space.demo.dao&quot;) 2.2 Configurate a mapper Bean1234@Repositorypublic interface UserMapper { List&lt;User&gt; queryAll();} 2.3 Mapper.xml123456789&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;&lt;mapper namespace=&quot;my.space.demo.dao.UserMapper&quot;&gt; &lt;select id=&quot;queryAll&quot; resultType=&quot;user&quot;&gt; select * from user &lt;/select&gt;&lt;/mapper&gt; 3 JUnit Test12345678910111213@RunWith(SpringRunner.class)@SpringBootTest(classes = DemoApplication.class)public class UserMapperTest { @Autowired private UserMapper userMapper; @Test public void queryAll() throws Exception { List&lt;User&gt; users = userMapper.queryAll(); users.forEach(System.out::println); }} Spring 将Mapper自动装配，装配后直接使用。 4 Final","link":"/2020/11/07/Build-a-Simple-SpringBoot-Demo/"},{"title":"SpringBoot AutoConfiguration","text":"Sth about SpringBoot AutoConfiguraion. 了解自动配置，就需要了解SpringBoot启动类上的注解。 1 $@SpringBootApplication$1234567891011@Target(ElementType.TYPE)@Retention(RetentionPolicy.RUNTIME)@Documented@Inherited@SpringBootConfiguration@EnableAutoConfiguration@ComponentScan(excludeFilters = { @Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class), @Filter(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) })public @interface SpringBootApplication { ...} $@SpringBootConfiguration$ 标注了被标注类是一个组件($@Configuration$) $@EnableAutoConfiguration$ 标注了被标注类开启自动注解。 2 $@EnableAutoConfiguration$123456789@Target(ElementType.TYPE)@Retention(RetentionPolicy.RUNTIME)@Documented@Inherited@AutoConfigurationPackage@Import(AutoConfigurationImportSelector.class)public @interface EnableAutoConfiguration { ...} 2.1 $@AutoConfigurationPackage$自动配置包，就是将启动类同级包下的所有组件都添加到容器中去。 12345678@Target(ElementType.TYPE)@Retention(RetentionPolicy.RUNTIME)@Documented@Inherited@Import(AutoConfigurationPackages.Registrar.class)public @interface AutoConfigurationPackage { ...} AutoConfigurationPackages.Registrar.class 将自动配置的包，和启动类同级目录下的组件都加入到容器中去。 2.2 $AutoConfigurationImportSelector.class$导入自动配置选择器，将SpringBoot内置的$@Configuration$ 组件加入到容器中，其实就是将配置类应用生效，SpringBoot已经写好了，直接用的默认的配置类。 12345678910111213141516171819public class AutoConfigurationImportSelector implements DeferredImportSelector, BeanClassLoaderAware, ResourceLoaderAware, BeanFactoryAware, EnvironmentAware, Ordered { ... protected AutoConfigurationEntry getAutoConfigurationEntry(AnnotationMetadata annotationMetadata) { if (!isEnabled(annotationMetadata)) { return EMPTY_ENTRY; } AnnotationAttributes attributes = getAttributes(annotationMetadata); List&lt;String&gt; configurations = getCandidateConfigurations(annotationMetadata, attributes); configurations = removeDuplicates(configurations); Set&lt;String&gt; exclusions = getExclusions(annotationMetadata, attributes); checkExcludedClasses(configurations, exclusions); configurations.removeAll(exclusions); configurations = getConfigurationClassFilter().filter(configurations); fireAutoConfigurationImportEvents(configurations, exclusions); return new AutoConfigurationEntry(configurations, exclusions); } ...} getCandidateConfigurations 获取候选的配置类 1234567protected List&lt;String&gt; getCandidateConfigurations(AnnotationMetadata metadata, AnnotationAttributes attributes) { List&lt;String&gt; configurations = SpringFactoriesLoader.loadFactoryNames(getSpringFactoriesLoaderFactoryClass(), getBeanClassLoader()); Assert.notEmpty(configurations, &quot;No auto configuration classes found in META-INF/spring.factories. If you &quot; + &quot;are using a custom packaging, make sure that file is correct.&quot;); return configurations;} loadFactoryNames: 1234public static List&lt;String&gt; loadFactoryNames(Class&lt;?&gt; factoryType, @Nullable ClassLoader classLoader) { String factoryTypeName = factoryType.getName(); return loadSpringFactories(classLoader).getOrDefault(factoryTypeName, Collections.emptyList());} 123456789101112131415161718192021222324252627282930private static Map&lt;String, List&lt;String&gt;&gt; loadSpringFactories(@Nullable ClassLoader classLoader) { MultiValueMap&lt;String, String&gt; result = cache.get(classLoader); if (result != null) { return result; } try { Enumeration&lt;URL&gt; urls = (classLoader != null ? classLoader.getResources(FACTORIES_RESOURCE_LOCATION) : ClassLoader.getSystemResources(FACTORIES_RESOURCE_LOCATION)); result = new LinkedMultiValueMap&lt;&gt;(); while (urls.hasMoreElements()) { URL url = urls.nextElement(); UrlResource resource = new UrlResource(url); Properties properties = PropertiesLoaderUtils.loadProperties(resource); for (Map.Entry&lt;?, ?&gt; entry : properties.entrySet()) { String factoryTypeName = ((String) entry.getKey()).trim(); for (String factoryImplementationName : StringUtils.commaDelimitedListToStringArray((String) entry.getValue())) { result.add(factoryTypeName, factoryImplementationName.trim()); } } } cache.put(classLoader, result); return result; } catch (IOException ex) { throw new IllegalArgumentException(&quot;Unable to load factories from location [&quot; + FACTORIES_RESOURCE_LOCATION + &quot;]&quot;, ex); }} 123Enumeration&lt;URL&gt; urls = (classLoader != null ? classLoader.getResources(FACTORIES_RESOURCE_LOCATION) : ClassLoader.getSystemResources(FACTORIES_RESOURCE_LOCATION)); FACTORIES_RESOURCE_LOCATION 获取默认配置类的位置，使用类加载器加载，映射到Properties返回，loadSpringFactories(classLoader).getOrDefault(factoryTypeName, Collections.emptyList())，再取出想要的factoryTypeName。 1FACTORIES_RESOURCE_LOCATION =&gt; META-INF/spring.factories 123456789101112131415loadSpringFactories(classLoader) 返回的 便是SpringBoot默认的配置类包的全限定名&quot;org.springframework.beans.BeanInfoFactory&quot; -&gt; {LinkedList@2090} size = 1&quot;org.springframework.boot.autoconfigure.EnableAutoConfiguration&quot; -&gt; {LinkedList@2092} size = 132&quot;org.springframework.context.ApplicationListener&quot; -&gt; {LinkedList@2094} size = 13&quot;org.springframework.context.ApplicationContextInitializer&quot; -&gt; {LinkedList@2096} size = 8&quot;org.springframework.boot.env.EnvironmentPostProcessor&quot; -&gt; {LinkedList@2098} size = 6&quot;org.springframework.boot.diagnostics.FailureAnalysisReporter&quot; -&gt; {LinkedList@2100} size = 1&quot;org.springframework.boot.diagnostics.FailureAnalyzer&quot; -&gt; {LinkedList@2102} size = 21&quot;org.springframework.boot.SpringBootExceptionReporter&quot; -&gt; {LinkedList@2104} size = 1&quot;org.springframework.boot.SpringApplicationRunListener&quot; -&gt; {LinkedList@2106} size = 1&quot;org.springframework.boot.env.PropertySourceLoader&quot; -&gt; {LinkedList@2108} size = 2&quot;org.springframework.boot.autoconfigure.AutoConfigurationImportListener&quot; -&gt; {LinkedList@2110} size = 1&quot;org.springframework.boot.autoconfigure.AutoConfigurationImportFilter&quot; -&gt; {LinkedList@2112} size = 3&quot;org.springframework.boot.autoconfigure.template.TemplateAvailabilityProvider&quot; -&gt; {LinkedList@2114} size = 5 综上，$AutoConfigurationImportSelector.class$ 导入所有SpringBoot默认的配置类","link":"/2020/11/08/SpringBoot%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE/"},{"title":"Usage of yaml in SpringBoot","text":"Use yaml 1 Configurate yaml在$application.yml $中可以配置javabean的属性注入 1234cat: name: abc age: 12 nickName: ccc 2 Java Bean12345678@Component@ConfigurationProperties(prefix = &quot;cat&quot;)public class Cat { private String name; private String nickName; private Integer age; // 注意Bean重要配置GetterAndSetter 否则不能注入} 只有在Spring容器中的Bean才能被注入属性值，所以需要$@Component$ 另外需要$@ConfigurationProperties(prefix = “cat”)$ 声明在yaml文件中的属性前缀。 此时Idea 会提示让你导入一个依赖 12345&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt; &lt;optional&gt;true&lt;/optional&gt;&lt;/dependency&gt; 目的是让application.yml文件中能有提示。 3 @Validated JSR303 校验只有在使用@ConfigurationProperties 注解的时候才能使用使用jsr303校验，即对注入的属性校验格式。 3.1 加入依赖1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-validation&lt;/artifactId&gt;&lt;/dependency&gt; 3.2 Validated在Bean前加入$@Validated$ 注解，就可以在属性上加校验了，比如$@Email$ ,$@NotNull$ 当输入不符合规范的时候 Binding to target org.springframework.boot.context.properties.bind.BindException: Failed to bind properties under ‘cat’ to my.space.demo.pojo.Cat failed: Property: cat.nameValue: lzzOrigin: class path resource [application.yaml]:20:9Reason: 不是一个合法的电子邮件地址 4 @Value 注入使用@Value 和SPEL表达式也可以注入，但是不支持松散绑定，即不能自动转换驼峰命名法。 12345678@Component//@ConfigurationProperties(prefix = &quot;cat&quot;)public class Cat { @Value(value = &quot;${cat.name}&quot;) private String name; private String nickName; private Integer age;} 5 对比 @Value @ConfigurationProperties 单个属性赋值 批量复制 不支持松散绑定 支持松散绑定 不支持JSR303校验 支持校验 支持SpEL 不支持Spring表达式语言 6 占位符可以使用$${}$ 获取配置文件上下文的内容，如果不存在，可以使用冒号指定默认值 12cat: name: ${dog.name:lzz}_01","link":"/2020/11/08/Usage-of-yaml-in-SpringBoot/"},{"title":"PropertiesSource And ImportResource Annotation","text":"@PropertiesSource 被用来导入指定的yaml配置文件，@ImportResource 被用来导入指定的xml的配置文件(比如bean的注入) 1 @PropertiesSource将配置从application.yml中分离出来，然后使用PropertiesSource读取配置，注意要用properties文件 123cat.age=12cat.name=lzzcat.nick-name=lzq 12345678@Component@PropertySource(value = &quot;classpath:application-cat.properties&quot;)@ConfigurationProperties(prefix = &quot;cat&quot;)public class Cat { private String name; private String nickName; private Integer age;} Tips: 建议所有的配置文件都以application开头，这样会被idea识别为SpringBoot的配置文件，会有代码提示 2 @ImportResource之前在Spring中所有的Bean注入都是在xml中完成的，SpringBoot也可以这样做，虽然不推荐。 在启动类中添加这个注解，value值写入类路径下的xml文件即可，不推荐 3 推荐的SpringBoot配置的写法使用配置类，新建包config，在这里面写配置类 1234567@Configurationpublic class MyAppConfiguration { @Bean public Dog tinyDog() { return new Dog(); }} Dog类中没有添加@Component注解，但是仍然注入成功，bean名就是tinyDog。","link":"/2020/11/08/PropertiesSource-And-ImportResource/"},{"title":"SpringBoot AutoConfiguration","text":"Principle of AutoConfiguration. 1 @EnableAutoConfiguraion​ 开启自动配置 2 @Import(AutoConfigurationImportSelector.class)​ 导入自动配置选择器，具体导入了什么，查看$AutoConfigurationImportSelector$ 中的selectImports -&gt; getAutoConfigurationEntry 方法。 3 getAutoConfigurationEntry1234567891011121314protected AutoConfigurationEntry getAutoConfigurationEntry(AnnotationMetadata annotationMetadata) { if (!isEnabled(annotationMetadata)) { return EMPTY_ENTRY; } AnnotationAttributes attributes = getAttributes(annotationMetadata); List&lt;String&gt; configurations = getCandidateConfigurations(annotationMetadata, attributes); configurations = removeDuplicates(configurations); Set&lt;String&gt; exclusions = getExclusions(annotationMetadata, attributes); checkExcludedClasses(configurations, exclusions); configurations.removeAll(exclusions); configurations = getConfigurationClassFilter().filter(configurations); fireAutoConfigurationImportEvents(configurations, exclusions); return new AutoConfigurationEntry(configurations, exclusions);} 1List&lt;String&gt; configurations = getCandidateConfigurations(annotationMetadata, attributes); ​ 获取候选的配置 12345protected List&lt;String&gt; getCandidateConfigurations(AnnotationMetadata metadata, AnnotationAttributes attributes) { List&lt;String&gt; configurations = SpringFactoriesLoader.loadFactoryNames(getSpringFactoriesLoaderFactoryClass(), getBeanClassLoader()); ...} 123protected Class&lt;?&gt; getSpringFactoriesLoaderFactoryClass() { return EnableAutoConfiguration.class;} 123456789101112131415161718private static Map&lt;String, List&lt;String&gt;&gt; loadSpringFactories(@Nullable ClassLoader classLoader) { ... Enumeration&lt;URL&gt; urls = (classLoader != null ? classLoader.getResources(FACTORIES_RESOURCE_LOCATION) : ClassLoader.getSystemResources(FACTORIES_RESOURCE_LOCATION)); result = new LinkedMultiValueMap&lt;&gt;(); while (urls.hasMoreElements()) { URL url = urls.nextElement(); UrlResource resource = new UrlResource(url); Properties properties = PropertiesLoaderUtils.loadProperties(resource); for (Map.Entry&lt;?, ?&gt; entry : properties.entrySet()) { String factoryTypeName = ((String) entry.getKey()).trim(); for (String factoryImplementationName : StringUtils.commaDelimitedListToStringArray((String) entry.getValue())) { result.add(factoryTypeName, factoryImplementationName.trim()); } } ...} 调用 $SpringFactoriesLoader.loadFactoryNames() $ 使用类加载器获取资源$FACTORIES_RESOURCE_LOCATION $ ( “META-INF/spring.factories” ) ，扫描所有jar包下的这个文件里的内容，整理成properties，返回所有的自动配置类，再从这些里面获取 $ EnableAutoConfiguration.class $ 对应的值。 META-INF/spring.factories在包$spring-boot-autoconfigure-2.3.5.RELEASE.jar$ 里面可以找到含有EnableAutoConfiguration属性的properties，对应的值便是候选的自动配置类（getAutoConfigurationEntry ）。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130# Auto Configureorg.springframework.boot.autoconfigure.EnableAutoConfiguration=\\org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\\org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\\org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\\org.springframework.boot.autoconfigure.batch.BatchAutoConfiguration,\\org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration,\\org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration,\\org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration,\\org.springframework.boot.autoconfigure.context.LifecycleAutoConfiguration,\\org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration,\\org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration,\\org.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration,\\org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration,\\org.springframework.boot.autoconfigure.data.cassandra.CassandraDataAutoConfiguration,\\org.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveDataAutoConfiguration,\\org.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveRepositoriesAutoConfiguration,\\org.springframework.boot.autoconfigure.data.cassandra.CassandraRepositoriesAutoConfiguration,\\org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataAutoConfiguration,\\org.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveDataAutoConfiguration,\\org.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveRepositoriesAutoConfiguration,\\org.springframework.boot.autoconfigure.data.couchbase.CouchbaseRepositoriesAutoConfiguration,\\org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchDataAutoConfiguration,\\org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchRepositoriesAutoConfiguration,\\org.springframework.boot.autoconfigure.data.elasticsearch.ReactiveElasticsearchRepositoriesAutoConfiguration,\\org.springframework.boot.autoconfigure.data.elasticsearch.ReactiveElasticsearchRestClientAutoConfiguration,\\org.springframework.boot.autoconfigure.data.jdbc.JdbcRepositoriesAutoConfiguration,\\org.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration,\\org.springframework.boot.autoconfigure.data.ldap.LdapRepositoriesAutoConfiguration,\\org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration,\\org.springframework.boot.autoconfigure.data.mongo.MongoReactiveDataAutoConfiguration,\\org.springframework.boot.autoconfigure.data.mongo.MongoReactiveRepositoriesAutoConfiguration,\\org.springframework.boot.autoconfigure.data.mongo.MongoRepositoriesAutoConfiguration,\\org.springframework.boot.autoconfigure.data.neo4j.Neo4jDataAutoConfiguration,\\org.springframework.boot.autoconfigure.data.neo4j.Neo4jRepositoriesAutoConfiguration,\\org.springframework.boot.autoconfigure.data.solr.SolrRepositoriesAutoConfiguration,\\org.springframework.boot.autoconfigure.data.r2dbc.R2dbcDataAutoConfiguration,\\org.springframework.boot.autoconfigure.data.r2dbc.R2dbcRepositoriesAutoConfiguration,\\org.springframework.boot.autoconfigure.data.r2dbc.R2dbcTransactionManagerAutoConfiguration,\\org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration,\\org.springframework.boot.autoconfigure.data.redis.RedisReactiveAutoConfiguration,\\org.springframework.boot.autoconfigure.data.redis.RedisRepositoriesAutoConfiguration,\\org.springframework.boot.autoconfigure.data.rest.RepositoryRestMvcAutoConfiguration,\\org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration,\\org.springframework.boot.autoconfigure.elasticsearch.ElasticsearchRestClientAutoConfiguration,\\org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration,\\org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration,\\org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration,\\org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration,\\org.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration,\\org.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration,\\org.springframework.boot.autoconfigure.hazelcast.HazelcastAutoConfiguration,\\org.springframework.boot.autoconfigure.hazelcast.HazelcastJpaDependencyAutoConfiguration,\\org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration,\\org.springframework.boot.autoconfigure.http.codec.CodecsAutoConfiguration,\\org.springframework.boot.autoconfigure.influx.InfluxDbAutoConfiguration,\\org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration,\\org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration,\\org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration,\\org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,\\org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration,\\org.springframework.boot.autoconfigure.jdbc.JndiDataSourceAutoConfiguration,\\org.springframework.boot.autoconfigure.jdbc.XADataSourceAutoConfiguration,\\org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration,\\org.springframework.boot.autoconfigure.jms.JmsAutoConfiguration,\\org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration,\\org.springframework.boot.autoconfigure.jms.JndiConnectionFactoryAutoConfiguration,\\org.springframework.boot.autoconfigure.jms.activemq.ActiveMQAutoConfiguration,\\org.springframework.boot.autoconfigure.jms.artemis.ArtemisAutoConfiguration,\\org.springframework.boot.autoconfigure.jersey.JerseyAutoConfiguration,\\org.springframework.boot.autoconfigure.jooq.JooqAutoConfiguration,\\org.springframework.boot.autoconfigure.jsonb.JsonbAutoConfiguration,\\org.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration,\\org.springframework.boot.autoconfigure.availability.ApplicationAvailabilityAutoConfiguration,\\org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapAutoConfiguration,\\org.springframework.boot.autoconfigure.ldap.LdapAutoConfiguration,\\org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration,\\org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration,\\org.springframework.boot.autoconfigure.mail.MailSenderValidatorAutoConfiguration,\\org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration,\\org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration,\\org.springframework.boot.autoconfigure.mongo.MongoReactiveAutoConfiguration,\\org.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration,\\org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration,\\org.springframework.boot.autoconfigure.quartz.QuartzAutoConfiguration,\\org.springframework.boot.autoconfigure.r2dbc.R2dbcAutoConfiguration,\\org.springframework.boot.autoconfigure.rsocket.RSocketMessagingAutoConfiguration,\\org.springframework.boot.autoconfigure.rsocket.RSocketRequesterAutoConfiguration,\\org.springframework.boot.autoconfigure.rsocket.RSocketServerAutoConfiguration,\\org.springframework.boot.autoconfigure.rsocket.RSocketStrategiesAutoConfiguration,\\org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration,\\org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration,\\org.springframework.boot.autoconfigure.security.servlet.SecurityFilterAutoConfiguration,\\org.springframework.boot.autoconfigure.security.reactive.ReactiveSecurityAutoConfiguration,\\org.springframework.boot.autoconfigure.security.reactive.ReactiveUserDetailsServiceAutoConfiguration,\\org.springframework.boot.autoconfigure.security.rsocket.RSocketSecurityAutoConfiguration,\\org.springframework.boot.autoconfigure.security.saml2.Saml2RelyingPartyAutoConfiguration,\\org.springframework.boot.autoconfigure.sendgrid.SendGridAutoConfiguration,\\org.springframework.boot.autoconfigure.session.SessionAutoConfiguration,\\org.springframework.boot.autoconfigure.security.oauth2.client.servlet.OAuth2ClientAutoConfiguration,\\org.springframework.boot.autoconfigure.security.oauth2.client.reactive.ReactiveOAuth2ClientAutoConfiguration,\\org.springframework.boot.autoconfigure.security.oauth2.resource.servlet.OAuth2ResourceServerAutoConfiguration,\\org.springframework.boot.autoconfigure.security.oauth2.resource.reactive.ReactiveOAuth2ResourceServerAutoConfiguration,\\org.springframework.boot.autoconfigure.solr.SolrAutoConfiguration,\\org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration,\\org.springframework.boot.autoconfigure.task.TaskSchedulingAutoConfiguration,\\org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration,\\org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration,\\org.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfiguration,\\org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration,\\org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration,\\org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration,\\org.springframework.boot.autoconfigure.web.reactive.HttpHandlerAutoConfiguration,\\org.springframework.boot.autoconfigure.web.reactive.ReactiveWebServerFactoryAutoConfiguration,\\org.springframework.boot.autoconfigure.web.reactive.WebFluxAutoConfiguration,\\org.springframework.boot.autoconfigure.web.reactive.error.ErrorWebFluxAutoConfiguration,\\org.springframework.boot.autoconfigure.web.reactive.function.client.ClientHttpConnectorAutoConfiguration,\\org.springframework.boot.autoconfigure.web.reactive.function.client.WebClientAutoConfiguration,\\org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration,\\org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration,\\org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration,\\org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration,\\org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration,\\org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration,\\org.springframework.boot.autoconfigure.websocket.reactive.WebSocketReactiveAutoConfiguration,\\org.springframework.boot.autoconfigure.websocket.servlet.WebSocketServletAutoConfiguration,\\org.springframework.boot.autoconfigure.websocket.servlet.WebSocketMessagingAutoConfiguration,\\org.springframework.boot.autoconfigure.webservices.WebServicesAutoConfiguration,\\org.springframework.boot.autoconfigure.webservices.client.WebServiceTemplateAutoConfiguration 以 HttpEncodingAutoConfiguration 为例解释自动配置原理12345678@Configuration(proxyBeanMethods = false) // 表示当前类为配置类，可加入到容器中@EnableConfigurationProperties(ServerProperties.class) // 开启ConfigurationProperties@ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.SERVLET)@ConditionalOnClass(CharacterEncodingFilter.class)@ConditionalOnProperty(prefix = &quot;server.servlet.encoding&quot;, value = &quot;enabled&quot;, matchIfMissing = true)public class HttpEncodingAutoConfiguration { ...} ServerProperties.class1234@ConfigurationProperties(prefix = &quot;server&quot;, ignoreUnknownFields = true)public class ServerProperties { ...} 这个类的属性可以从properties文件中注入，书写格式的前缀便是”server” 因此，在application.yml 文件中配置的所有的属性，都可以找到一个xxxxProperties配置类作为依据，类中所有的属性便可以配置的属性。 @EnableConfigurationProperties便将properties文件和配置类绑定 @ConditionalOnXXXX作为一种条件判断的注解。 比如：$@ConditionalOnWebApplication$ 注解便是判断当前是不是一个web应用。 $@ConditionalOnClass$ 判断当前是否已经有过滤器$CharacterEncodingFilter$ $@ConditionalOnProperty$ 判断当前是否有该properties属性，如果没有就设置为 true，然后再判断，其实就是永远为真，无论你写不写这个properties键。 配置类的书写12345678910111213141516171819202122232425@Configuration(proxyBeanMethods = false)@EnableConfigurationProperties(ServerProperties.class)@ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.SERVLET)@ConditionalOnClass(CharacterEncodingFilter.class)@ConditionalOnProperty(prefix = &quot;server.servlet.encoding&quot;, value = &quot;enabled&quot;, matchIfMissing = true)public class HttpEncodingAutoConfiguration { private final Encoding properties; // 将配置的properties属性注入到该配置类中 public HttpEncodingAutoConfiguration(ServerProperties properties) { this.properties = properties.getServlet().getEncoding(); } @Bean @ConditionalOnMissingBean // 在容器中缺失该bean的时候注入到容器中。注入组件的依赖，属性值则从properties文件中获取 public CharacterEncodingFilter characterEncodingFilter() { CharacterEncodingFilter filter = new OrderedCharacterEncodingFilter(); filter.setEncoding(this.properties.getCharset().name()); filter.setForceRequestEncoding(this.properties.shouldForce(Encoding.Type.REQUEST)); filter.setForceResponseEncoding(this.properties.shouldForce(Encoding.Type.RESPONSE)); return filter; } ...} 原理SpringBoot 自动配置的基本原理，就是SpringBoot已经提前写好了很多配置类，在工程启动的时候会根据情况将需要的自动配置类加入到容器中，这些配置类又和properties 文件绑定，从properties文件中配置便可以注入到自动配置类中，自动配置类又根据配置new出依赖加入到容器中。","link":"/2020/11/08/SpringBoot-AutoConfiguration/"}],"tags":[{"name":"Spring","slug":"Spring","link":"/tags/Spring/"},{"name":"SpringBoot","slug":"SpringBoot","link":"/tags/SpringBoot/"}],"categories":[]}